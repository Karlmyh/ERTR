/home/karl/RTER/comparison/PRT/sklearn/utils/multiclass.py:14: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.
  from scipy.sparse.base import spmatrix
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py:496: FutureWarning: From version 0.22, errors during fit will result in a cross validation score of NaN by default. Use error_score='raise' if you want an exception raised or error_score=np.nan to adopt the behavior from version 0.22.
  warnings.warn("From version 0.22, errors during fit will result "
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/_parallel_backends.py", line 350, in __call__
    return self.func(*args, **kwargs)
  File "/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py", line 131, in __call__
    return [func(*args, **kwargs) for func, args, kwargs in self.items]
  File "/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py", line 131, in <listcomp>
    return [func(*args, **kwargs) for func, args, kwargs in self.items]
  File "/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py", line 487, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py", line 1721, in fit
    super(DecisionTreeRegressor, self).fit(
  File "/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py", line 217, in fit
    raise ValueError("min_samples_leaf must be at least 1 "
ValueError: min_samples_leaf must be at least 1 or in (0, 0.5], got 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/karl/anaconda3/envs/prenv/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/_parallel_backends.py", line 359, in __call__
    raise TransportableException(text, e_type)
sklearn.externals.joblib.my_exceptions.TransportableException: TransportableException
___________________________________________________________________________
ValueError                                         Sun Jan  1 00:23:01 2023
PID: 8026        Python 3.10.8: /home/karl/anaconda3/envs/prenv/bin/python3
...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), {'score': <function _passthrough_scorer>}, array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), array([0, 1, 2, 3, 4]), 0, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])}), {'error_score': 'raise-deprecating', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), {'score': <function _passthrough_scorer>}, array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), array([0, 1, 2, 3, 4]), 0, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])})
        kwargs = {'error_score': 'raise-deprecating', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py in _fit_and_score(estimator=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), y=array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), scorer={'score': <function _passthrough_scorer>}, train=array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), test=array([0, 1, 2, 3, 4]), verbose=0, parameters={'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])}, fit_params={}, return_train_score='warn', return_parameters=False, return_n_test_samples=True, return_times=True, return_estimator=False, error_score='raise-deprecating')
    482 
    483     try:
    484         if y_train is None:
    485             estimator.fit(X_train, **fit_params)
    486         else:
--> 487             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method DecisionTreeRegressor.fit of Decis..., 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988]))>
        X_train = array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]])
        y_train = array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671])
        fit_params = {}
    488 
    489     except Exception as e:
    490         # Note fit time as time until error
    491         fit_time = time.time() - start_time

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py in fit(self=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), y=array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671]), sample_weight=None, check_input=True, X_idx_sorted=None)
   1716         Returns
   1717         -------
   1718         self : object
   1719         """
   1720 
-> 1721         super(DecisionTreeRegressor, self).fit(
        self.fit = <bound method DecisionTreeRegressor.fit of Decis..., 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988]))>
        X = array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]])
        y = array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671])
        sample_weight = None
        check_input = True
        X_idx_sorted = None
   1722             X, y,
   1723             sample_weight=sample_weight,
   1724             check_input=check_input,
   1725             X_idx_sorted=X_idx_sorted)

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py in fit(self=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-1.    , -1.    , -1.    , -1.    , -1. ... 0.    , -0.3325, -0.3325]],
      dtype=float32), y=array([[0.572],
       [0.833],
       [0.584],
...
       [0.642],
       [0.749],
       [0.671]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    212         max_leaf_nodes = (-1 if self.max_leaf_nodes is None
    213                           else self.max_leaf_nodes)
    214 
    215         if isinstance(self.min_samples_leaf, (numbers.Integral, np.integer)):
    216             if not 1 <= self.min_samples_leaf:
--> 217                 raise ValueError("min_samples_leaf must be at least 1 "
        self.min_samples_leaf = 0
    218                                  "or in (0, 0.5], got %s"
    219                                  % self.min_samples_leaf)
    220             min_samples_leaf = self.min_samples_leaf
    221         else:  # float

ValueError: min_samples_leaf must be at least 1 or in (0, 0.5], got 0
___________________________________________________________________________
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py", line 699, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
  File "/home/karl/anaconda3/envs/prenv/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
sklearn.externals.joblib.my_exceptions.TransportableException: TransportableException
___________________________________________________________________________
ValueError                                         Sun Jan  1 00:23:01 2023
PID: 8026        Python 3.10.8: /home/karl/anaconda3/envs/prenv/bin/python3
...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), {'score': <function _passthrough_scorer>}, array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), array([0, 1, 2, 3, 4]), 0, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])}), {'error_score': 'raise-deprecating', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), {'score': <function _passthrough_scorer>}, array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), array([0, 1, 2, 3, 4]), 0, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])})
        kwargs = {'error_score': 'raise-deprecating', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py in _fit_and_score(estimator=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), y=array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), scorer={'score': <function _passthrough_scorer>}, train=array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), test=array([0, 1, 2, 3, 4]), verbose=0, parameters={'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])}, fit_params={}, return_train_score='warn', return_parameters=False, return_n_test_samples=True, return_times=True, return_estimator=False, error_score='raise-deprecating')
    482 
    483     try:
    484         if y_train is None:
    485             estimator.fit(X_train, **fit_params)
    486         else:
--> 487             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method DecisionTreeRegressor.fit of Decis..., 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988]))>
        X_train = array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]])
        y_train = array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671])
        fit_params = {}
    488 
    489     except Exception as e:
    490         # Note fit time as time until error
    491         fit_time = time.time() - start_time

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py in fit(self=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), y=array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671]), sample_weight=None, check_input=True, X_idx_sorted=None)
   1716         Returns
   1717         -------
   1718         self : object
   1719         """
   1720 
-> 1721         super(DecisionTreeRegressor, self).fit(
        self.fit = <bound method DecisionTreeRegressor.fit of Decis..., 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988]))>
        X = array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]])
        y = array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671])
        sample_weight = None
        check_input = True
        X_idx_sorted = None
   1722             X, y,
   1723             sample_weight=sample_weight,
   1724             check_input=check_input,
   1725             X_idx_sorted=X_idx_sorted)

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py in fit(self=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-1.    , -1.    , -1.    , -1.    , -1. ... 0.    , -0.3325, -0.3325]],
      dtype=float32), y=array([[0.572],
       [0.833],
       [0.584],
...
       [0.642],
       [0.749],
       [0.671]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    212         max_leaf_nodes = (-1 if self.max_leaf_nodes is None
    213                           else self.max_leaf_nodes)
    214 
    215         if isinstance(self.min_samples_leaf, (numbers.Integral, np.integer)):
    216             if not 1 <= self.min_samples_leaf:
--> 217                 raise ValueError("min_samples_leaf must be at least 1 "
        self.min_samples_leaf = 0
    218                                  "or in (0, 0.5], got %s"
    219                                  % self.min_samples_leaf)
    220             min_samples_leaf = self.min_samples_leaf
    221         else:  # float

ValueError: min_samples_leaf must be at least 1 or in (0, 0.5], got 0
___________________________________________________________________________

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/karl/RTER/comparison/PRT/PRT-CV.py", line 60, in <module>
    cv_model_PRT.fit(X_train, y_train)
  File "/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py", line 650, in fit
    out = Parallel(
  File "/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py", line 789, in __call__
    self.retrieve()
  File "/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py", line 740, in retrieve
    raise exception
sklearn.externals.joblib.my_exceptions.JoblibValueError: JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/karl/RTER/comparison/PRT/PRT-CV.py in <module>()
     55                      "min_samples_leaf":[round(len(X_train) * min_leaf_percentage) for min_leaf_percentage in min_leaf_percentage_values],
     56                      "tol":[sigma_Xp * sigma_val for sigma_val in sigma_values]}
     57         
     58         
     59         cv_model_PRT = GridSearchCV(estimator=tree.DecisionTreeRegressor(),param_grid=parameters, cv=5, n_jobs=-1)
---> 60         cv_model_PRT.fit(X_train, y_train)
     61         
     62         time_start = time()
     63         model_PRT = cv_model_PRT.best_estimator_
     64         F = [f for f in model_PRT.tree_.feature if f != -2]

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=5, error_score='raise-deprecatin...ain_score='warn',
       scoring=None, verbose=0), X=array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), y=array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), groups=None, **fit_params={})
    645                                      n_candidates * n_splits))
    646 
    647         base_estimator = clone(self.estimator)
    648         pre_dispatch = self.pre_dispatch
    649 
--> 650         out = Parallel(
        out = undefined
        self.n_jobs = -1
        self.verbose = 0
        pre_dispatch = '2*n_jobs'
        X = array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]])
        y = array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671])
        fit_params = {}
        self.return_train_score = 'warn'
        self.error_score = 'raise-deprecating'
        candidate_params = [{'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.04745594, 0.07184119, 0.09005279, 0.119...4442, 0.52074724,
       0.55861895, 0.57976813])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.09491188, 0.14368239, 0.18010557, 0.239...8884, 1.04149448,
       1.1172379 , 1.15953626])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.11863985, 0.17960298, 0.22513196, 0.298...6104, 1.3018681 ,
       1.39654738, 1.44942033])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.23727969, 0.35920597, 0.45026393, 0.597...2209, 2.60373619,
       2.79309475, 2.89884065])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.35591954, 0.53880895, 0.67539589, 0.896...8313, 3.90560429,
       4.18964213, 4.34826098])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.47455939, 0.71841193, 0.90052785, 1.195...4418, 5.20747238,
       5.58618951, 5.79768131])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.59319923, 0.89801491, 1.12565982, 1.494...0522, 6.50934048,
       6.98273689, 7.24710163])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.71183908, 1.0776179 , 1.35079178, 1.793...6627, 7.81120857,
       8.37928426, 8.69652196])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([ 0.83047893,  1.25722088,  1.57592374,  2...1,  9.11307667,
        9.77583164, 10.14594229])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([ 0.94911877,  1.43682386,  1.80105571,  2...6, 10.41494476,
       11.17237902, 11.59536261])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([ 2.37279693,  3.59205965,  4.50263926,  5...9, 26.0373619 ,
       27.93094755, 28.98840653])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([ 4.74559387,  7.18411931,  9.00527853, 11...9, 52.07472381,
       55.8618951 , 57.97681306])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk5', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk5', 'tol': array([0.04745594, 0.07184119, 0.09005279, 0.119...4442, 0.52074724,
       0.55861895, 0.57976813])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk5', 'tol': array([0.09491188, 0.14368239, 0.18010557, 0.239...8884, 1.04149448,
       1.1172379 , 1.15953626])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk5', 'tol': array([0.11863985, 0.17960298, 0.22513196, 0.298...6104, 1.3018681 ,
       1.39654738, 1.44942033])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk5', 'tol': array([0.23727969, 0.35920597, 0.45026393, 0.597...2209, 2.60373619,
       2.79309475, 2.89884065])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk5', 'tol': array([0.35591954, 0.53880895, 0.67539589, 0.896...8313, 3.90560429,
       4.18964213, 4.34826098])}, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk5', 'tol': array([0.47455939, 0.71841193, 0.90052785, 1.195...4418, 5.20747238,
       5.58618951, 5.79768131])}, ...]
        cv.split = <bound method _BaseKFold.split of KFold(n_splits=5, random_state=None, shuffle=False)>
        groups = None
    651             n_jobs=self.n_jobs, verbose=self.verbose,
    652             pre_dispatch=pre_dispatch
    653         )(delayed(_fit_and_score)(clone(base_estimator), X, y, scorers, train,
    654                                   test, self.verbose, parameters,

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object BaseSearchCV.fit.<locals>.<genexpr>>)
    784             if pre_dispatch == "all" or n_jobs == 1:
    785                 # The iterable was consumed all at once by the above for loop.
    786                 # No need to wait for async callbacks to trigger to
    787                 # consumption.
    788                 self._iterating = False
--> 789             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    790             # Make sure that we get a last message telling us we are done
    791             elapsed_time = time.time() - self._start_time
    792             self._print('Done %3i out of %3i | elapsed: %s finished',
    793                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sun Jan  1 00:23:01 2023
PID: 8026        Python 3.10.8: /home/karl/anaconda3/envs/prenv/bin/python3
...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), {'score': <function _passthrough_scorer>}, array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), array([0, 1, 2, 3, 4]), 0, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])}), {'error_score': 'raise-deprecating', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), {'score': <function _passthrough_scorer>}, array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), array([0, 1, 2, 3, 4]), 0, {'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])})
        kwargs = {'error_score': 'raise-deprecating', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_validation.py in _fit_and_score(estimator=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-0.5   ,  0.6   , -0.5   , -1.    ,  0. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), y=array([0.734, 0.859, 0.613, 0.741, 0.619, 0.572,...0.665, 0.545,
       0.646, 0.642, 0.749, 0.671]), scorer={'score': <function _passthrough_scorer>}, train=array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), test=array([0, 1, 2, 3, 4]), verbose=0, parameters={'criterion': 'mseprob', 'min_samples_leaf': 0, 'splitter': 'topk3', 'tol': array([0.02372797, 0.0359206 , 0.04502639, 0.059...7221, 0.26037362,
       0.27930948, 0.28988407])}, fit_params={}, return_train_score='warn', return_parameters=False, return_n_test_samples=True, return_times=True, return_estimator=False, error_score='raise-deprecating')
    482 
    483     try:
    484         if y_train is None:
    485             estimator.fit(X_train, **fit_params)
    486         else:
--> 487             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method DecisionTreeRegressor.fit of Decis..., 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988]))>
        X_train = array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]])
        y_train = array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671])
        fit_params = {}
    488 
    489     except Exception as e:
    490         # Note fit time as time until error
    491         fit_time = time.time() - start_time

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py in fit(self=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]]), y=array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671]), sample_weight=None, check_input=True, X_idx_sorted=None)
   1716         Returns
   1717         -------
   1718         self : object
   1719         """
   1720 
-> 1721         super(DecisionTreeRegressor, self).fit(
        self.fit = <bound method DecisionTreeRegressor.fit of Decis..., 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988]))>
        X = array([[-1.    , -1.    , -1.    , -1.    , -1. ... ,  0.    ,  0.    ,  0.    , -0.3325, -0.3325]])
        y = array([0.572, 0.833, 0.584, 0.516, 0.584, 0.838,...0.   , 0.665, 0.545, 0.646, 0.642, 0.749, 0.671])
        sample_weight = None
        check_input = True
        X_idx_sorted = None
   1722             X, y,
   1723             sample_weight=sample_weight,
   1724             check_input=check_input,
   1725             X_idx_sorted=X_idx_sorted)

...........................................................................
/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py in fit(self=DecisionTreeRegressor(_alpha=-1.0, criterion='ms...8, 0.2476 , 0.25837, 0.26037, 0.27931, 0.28988])), X=array([[-1.    , -1.    , -1.    , -1.    , -1. ... 0.    , -0.3325, -0.3325]],
      dtype=float32), y=array([[0.572],
       [0.833],
       [0.584],
...
       [0.642],
       [0.749],
       [0.671]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    212         max_leaf_nodes = (-1 if self.max_leaf_nodes is None
    213                           else self.max_leaf_nodes)
    214 
    215         if isinstance(self.min_samples_leaf, (numbers.Integral, np.integer)):
    216             if not 1 <= self.min_samples_leaf:
--> 217                 raise ValueError("min_samples_leaf must be at least 1 "
        self.min_samples_leaf = 0
    218                                  "or in (0, 0.5], got %s"
    219                                  % self.min_samples_leaf)
    220             min_samples_leaf = self.min_samples_leaf
    221         else:  # float

ValueError: min_samples_leaf must be at least 1 or in (0, 0.5], got 0
___________________________________________________________________________
Traceback (most recent call last):
  File "/home/karl/RTER/comparison/PRT/sklearn/__check_build/__init__.py", line 44, in <module>
    from ._check_build import check_build  # noqa
ModuleNotFoundError: No module named 'sklearn.__check_build._check_build'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "PRT-CV.py", line 7, in <module>
    from sklearn import tree
  File "/home/karl/RTER/comparison/PRT/sklearn/__init__.py", line 63, in <module>
    from . import __check_build
  File "/home/karl/RTER/comparison/PRT/sklearn/__check_build/__init__.py", line 46, in <module>
    raise_build_error(e)
  File "/home/karl/RTER/comparison/PRT/sklearn/__check_build/__init__.py", line 41, in raise_build_error
    %s""" % (e, local_dir, ''.join(dir_content).strip(), msg))
ImportError: No module named 'sklearn.__check_build._check_build'
___________________________________________________________________________
Contents of /home/karl/RTER/comparison/PRT/sklearn/__check_build:
setup.py                  _check_build.cpython-310-x86_64-linux-gnu.so__pycache__
_check_build.c            _check_build.pyx          __init__.py
___________________________________________________________________________
It seems that scikit-learn has not been built correctly.

If you have installed scikit-learn from source, please do not forget
to build the package before using it: run `python setup.py install` or
`make` in the source directory.

If you have used an installer, please check that it is suited for your
Python version, your operating system and your platform.
/home/karl/RTER/comparison/PRT/sklearn/utils/multiclass.py:14: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.
  from scipy.sparse.base import spmatrix
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:731: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.
  warnings.warn("The default of the `iid` parameter will change "
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:420: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  fold_sizes = (n_samples // n_splits) * np.ones(n_splits, dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  test_mask = np.zeros(_num_samples(X), dtype=np.bool)
/home/karl/RTER/comparison/PRT/sklearn/model_selection/_search.py:727: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int)
/home/karl/RTER/comparison/PRT/sklearn/utils/multiclass.py:14: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.
  from scipy.sparse.base import spmatrix
0 0.05 0.02 19.665
0 0.05 0.05 23.198
0 0.05 0.1 25.709
0 0.05 0.2 46.164
0 0.1 0.02 17.806
0 0.1 0.05 21.515
0 0.1 0.1 23.966
0 0.1 0.2 44.019
0 0.2 0.02 19.374
0 0.2 0.05 18.734
0 0.2 0.1 22.557
0 0.2 0.2 37.821
0 0.25 0.02 20.213
0 0.25 0.05 18.313
0 0.25 0.1 21.640
0 0.25 0.2 37.043
0 0.5 0.02 17.678
0 0.5 0.05 17.965
0 0.5 0.1 21.629
0 0.5 0.2 35.622
0 0.75 0.02 52.061
0 0.75 0.05 16.755
0 0.75 0.1 18.738
0 0.75 0.2 34.843
0 1 0.02 17.708
0 1 0.05 16.212
0 1 0.1 17.103
0 1 0.2 35.362
0 1.25 0.02 39.504
0 1.25 0.05 16.965
0 1.25 0.1 17.610
0 1.25 0.2 37.155
0 1.5 0.02 41.418
0 1.5 0.05 20.124
0 1.5 0.1 47.533
0 1.5 0.2 40.751
0 1.75 0.02 134.642
0 1.75 0.05 25.064
0 1.75 0.1 63.571
0 1.75 0.2 47.055
0 2 0.02 75.869
0 2 0.05 36.002
0 2 0.1 96.222
0 2 0.2 57.299
0 5 0.02 82024.316
0 5 0.05 35.541
0 5 0.1 585.879
0 5 0.2 1346.963
0 10 0.02 1293.454
0 10 0.05 1076.354
0 10 0.1 5722.055
0 10 0.2 13835.370
Best 0 1 0.1 19.376
1 0.05 0.02 18.743
1 0.05 0.05 20.777
1 0.05 0.1 20.361
1 0.05 0.2 38.591
1 0.1 0.02 15.651
1 0.1 0.05 19.752
1 0.1 0.1 20.038
1 0.1 0.2 36.275
1 0.2 0.02 20.318
1 0.2 0.05 17.455
1 0.2 0.1 16.543
1 0.2 0.2 29.195
1 0.25 0.02 15.451
1 0.25 0.05 15.497
1 0.25 0.1 15.550
1 0.25 0.2 27.448
1 0.5 0.02 15.314
1 0.5 0.05 15.357
1 0.5 0.1 13.975
1 0.5 0.2 24.835
1 0.75 0.02 16.486
1 0.75 0.05 12.694
1 0.75 0.1 13.885
1 0.75 0.2 29.054
1 1 0.02 13.428
1 1 0.05 10.712
1 1 0.1 13.786
1 1 0.2 29.355
1 1.25 0.02 12.143
1 1.25 0.05 10.468
1 1.25 0.1 15.113
1 1.25 0.2 30.020
1 1.5 0.02 19.429
1 1.5 0.05 12.633
1 1.5 0.1 15.559
1 1.5 0.2 31.003
1 1.75 0.02 14.718
1 1.75 0.05 12.496
1 1.75 0.1 15.882
1 1.75 0.2 32.166
1 2 0.02 10.324
1 2 0.05 14.483
1 2 0.1 15.401
1 2 0.2 33.326
1 5 0.02 19.609
1 5 0.05 15.867
1 5 0.1 16.197
1 5 0.2 38.530
1 10 0.02 44.131
1 10 0.05 11.042
1 10 0.1 16.908
1 10 0.2 39.672
Best 1 2 0.05 18.145
2 0.05 0.02 27.039
2 0.05 0.05 31.827
2 0.05 0.1 33.097
2 0.05 0.2 53.482
2 0.1 0.02 25.457
2 0.1 0.05 33.457
2 0.1 0.1 32.200
2 0.1 0.2 52.159
2 0.2 0.02 20.289
2 0.2 0.05 26.143
2 0.2 0.1 29.626
2 0.2 0.2 49.541
2 0.25 0.02 19.165
2 0.25 0.05 22.000
2 0.25 0.1 29.603
2 0.25 0.2 49.318
2 0.5 0.02 12.107
2 0.5 0.05 18.859
2 0.5 0.1 27.642
2 0.5 0.2 40.006
2 0.75 0.02 15.571
2 0.75 0.05 12.565
2 0.75 0.1 18.971
2 0.75 0.2 35.837
2 1 0.02 13.785
2 1 0.05 15.589
2 1 0.1 18.280
2 1 0.2 34.179
2 1.25 0.02 10.775
2 1.25 0.05 18.026
2 1.25 0.1 20.022
2 1.25 0.2 37.596
2 1.5 0.02 10.635
2 1.5 0.05 17.370
2 1.5 0.1 19.231
2 1.5 0.2 37.032
2 1.75 0.02 15.847
2 1.75 0.05 20.883
2 1.75 0.1 19.594
2 1.75 0.2 36.690
2 2 0.02 22.564
2 2 0.05 26.957
2 2 0.1 20.007
2 2 0.2 36.472
2 5 0.02 19.264
2 5 0.05 16.949
2 5 0.1 22.454
2 5 0.2 35.929
2 10 0.02 15.061
2 10 0.05 15.973
2 10 0.1 23.042
2 10 0.2 35.864
Best 2 1.5 0.05 17.751
3 0.05 0.02 21.067
3 0.05 0.05 23.114
3 0.05 0.1 33.651
3 0.05 0.2 42.234
3 0.1 0.02 19.908
3 0.1 0.05 20.061
3 0.1 0.1 32.248
3 0.1 0.2 41.159
3 0.2 0.02 17.599
3 0.2 0.05 18.806
3 0.2 0.1 31.429
3 0.2 0.2 38.820
3 0.25 0.02 20.290
3 0.25 0.05 17.941
3 0.25 0.1 31.015
3 0.25 0.2 38.080
3 0.5 0.02 15.048
3 0.5 0.05 18.551
3 0.5 0.1 29.445
3 0.5 0.2 37.344
3 0.75 0.02 12.518
3 0.75 0.05 14.972
3 0.75 0.1 30.437
3 0.75 0.2 34.983
3 1 0.02 12.440
3 1 0.05 14.770
3 1 0.1 22.969
3 1 0.2 35.958
3 1.25 0.02 18.649
3 1.25 0.05 17.153
3 1.25 0.1 18.964
3 1.25 0.2 35.746
3 1.5 0.02 13.070
3 1.5 0.05 16.188
3 1.5 0.1 18.710
3 1.5 0.2 35.644
3 1.75 0.02 15.079
3 1.75 0.05 18.969
3 1.75 0.1 18.725
3 1.75 0.2 35.605
3 2 0.02 15.017
3 2 0.05 19.224
3 2 0.1 18.819
3 2 0.2 35.598
3 5 0.02 21.014
3 5 0.05 16.972
3 5 0.1 18.904
3 5 0.2 35.733
3 10 0.02 15.411
3 10 0.05 17.874
3 10 0.1 19.440
3 10 0.2 35.780
Best 3 1 0.05 13.040
4 0.05 0.02 21.300
4 0.05 0.05 19.052
4 0.05 0.1 23.902
4 0.05 0.2 36.537
4 0.1 0.02 15.140
4 0.1 0.05 15.288
4 0.1 0.1 20.638
4 0.1 0.2 33.893
4 0.2 0.02 13.836
4 0.2 0.05 14.760
4 0.2 0.1 18.828
4 0.2 0.2 30.702
4 0.25 0.02 13.008
4 0.25 0.05 15.962
4 0.25 0.1 18.700
4 0.25 0.2 29.565
4 0.5 0.02 12.476
4 0.5 0.05 12.336
4 0.5 0.1 16.508
4 0.5 0.2 30.402
4 0.75 0.02 10.657
4 0.75 0.05 13.722
4 0.75 0.1 15.474
4 0.75 0.2 31.273
4 1 0.02 12.509
4 1 0.05 12.860
4 1 0.1 15.471
4 1 0.2 30.159
4 1.25 0.02 11.996
4 1.25 0.05 13.206
4 1.25 0.1 15.732
4 1.25 0.2 30.669
4 1.5 0.02 14.685
4 1.5 0.05 13.335
4 1.5 0.1 16.020
4 1.5 0.2 31.471
4 1.75 0.02 12.836
4 1.75 0.05 13.378
4 1.75 0.1 16.305
4 1.75 0.2 32.424
4 2 0.02 12.574
4 2 0.05 15.777
4 2 0.1 17.974
4 2 0.2 33.362
4 5 0.02 16.964
4 5 0.05 14.152
4 5 0.1 16.891
4 5 0.2 37.793
4 10 0.02 15.614
4 10 0.05 14.872
4 10 0.1 17.435
4 10 0.2 38.957
Best 4 0.75 0.05 18.501
0 0.05 0.02 9.178
0 0.05 0.05 9.240
0 0.05 0.1 10.515
0 0.05 0.2 19.729
0 0.1 0.02 8.796
0 0.1 0.05 8.502
0 0.1 0.1 9.192
0 0.1 0.2 18.715
0 0.2 0.02 9.197
0 0.2 0.05 7.485
0 0.2 0.1 8.135
0 0.2 0.2 16.304
0 0.25 0.02 8.663
0 0.25 0.05 9.452
0 0.25 0.1 7.663
0 0.25 0.2 15.038
0 0.5 0.02 8.585
0 0.5 0.05 7.322
0 0.5 0.1 6.562
0 0.5 0.2 10.303
0 0.75 0.02 8.379
0 0.75 0.05 6.550
0 0.75 0.1 6.255
0 0.75 0.2 8.164
0 1 0.02 7.164
0 1 0.05 6.415
0 1 0.1 6.417
0 1 0.2 7.453
0 1.25 0.02 7.738
0 1.25 0.05 6.205
0 1.25 0.1 6.031
0 1.25 0.2 7.300
0 1.5 0.02 7.967
0 1.5 0.05 6.019
0 1.5 0.1 5.516
0 1.5 0.2 7.348
0 1.75 0.02 8.547
0 1.75 0.05 5.830
0 1.75 0.1 6.175
0 1.75 0.2 7.462
0 2 0.02 7.622
0 2 0.05 5.887
0 2 0.1 6.198
0 2 0.2 7.589
0 5 0.02 6.149
0 5 0.05 6.346
0 5 0.1 5.770
0 5 0.2 8.466
0 10 0.02 7.541
0 10 0.05 5.321
0 10 0.1 5.764
0 10 0.2 8.996
Best 0 10 0.1 8.747
1 0.05 0.02 10.405
1 0.05 0.05 14.825
1 0.05 0.1 15.269
1 0.05 0.2 20.282
1 0.1 0.02 9.378
1 0.1 0.05 12.940
1 0.1 0.1 13.309
1 0.1 0.2 19.164
1 0.2 0.02 8.461
1 0.2 0.05 9.710
1 0.2 0.1 12.404
1 0.2 0.2 18.418
1 0.25 0.02 10.861
1 0.25 0.05 9.146
1 0.25 0.1 10.299
1 0.25 0.2 16.526
1 0.5 0.02 7.476
1 0.5 0.05 7.955
1 0.5 0.1 8.277
1 0.5 0.2 12.025
1 0.75 0.02 8.219
1 0.75 0.05 7.911
1 0.75 0.1 7.892
1 0.75 0.2 10.593
1 1 0.02 9.978
1 1 0.05 7.983
1 1 0.1 7.985
1 1 0.2 9.836
1 1.25 0.02 7.567
1 1.25 0.05 8.148
1 1.25 0.1 9.338
1 1.25 0.2 9.450
1 1.5 0.02 8.193
1 1.5 0.05 8.287
1 1.5 0.1 9.121
1 1.5 0.2 9.290
1 1.75 0.02 7.008
1 1.75 0.05 8.238
1 1.75 0.1 7.825
1 1.75 0.2 9.254
1 2 0.02 7.278
1 2 0.05 8.258
1 2 0.1 7.837
1 2 0.2 9.289
1 5 0.02 9.222
1 5 0.05 8.631
1 5 0.1 7.697
1 5 0.2 10.028
1 10 0.02 10.567
1 10 0.05 7.196
1 10 0.1 7.366
1 10 0.2 10.685
Best 1 1.75 0.05 11.226
2 0.05 0.02 9.249
2 0.05 0.05 10.305
2 0.05 0.1 14.298
2 0.05 0.2 16.286
2 0.1 0.02 20.489
2 0.1 0.05 12.901
2 0.1 0.1 11.592
2 0.1 0.2 14.771
2 0.2 0.02 9.627
2 0.2 0.05 10.853
2 0.2 0.1 7.927
2 0.2 0.2 11.541
2 0.25 0.02 8.910
2 0.25 0.05 7.924
2 0.25 0.1 7.502
2 0.25 0.2 10.584
2 0.5 0.02 8.458
2 0.5 0.05 8.468
2 0.5 0.1 7.026
2 0.5 0.2 8.824
2 0.75 0.02 11.267
2 0.75 0.05 8.379
2 0.75 0.1 7.297
2 0.75 0.2 8.410
Traceback (most recent call last):
  File "/home/karl/RTER/comparison/PRT/PRT.py", line 86, in <module>
    regressor.fit(X_tr_valid, y_tr_valid)
  File "/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py", line 1721, in fit
    super(DecisionTreeRegressor, self).fit(
  File "/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py", line 447, in fit
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted)
  File "sklearn/tree/_tree.pyx", line 662, in sklearn.tree._tree.BreadthFirstTreeBuilder.build
    cpdef build(self, Tree tree, object X, np.ndarray y,
  File "sklearn/tree/_tree.pyx", line 797, in sklearn.tree._tree.BreadthFirstTreeBuilder.build
    splitter.node_split(impurity, &split, &n_constant_features)
  File "sklearn/tree/_splitter.pyx", line 2274, in sklearn.tree._splitter.TopK3S1SplitterProb.node_split
    self.criterion.update3(best.pos, best.feature, best.threshold)
  File "sklearn/tree/_criterion.pyx", line 1784, in sklearn.tree._criterion.MSEPROB.update3
    _pb_l = prob_region(self.X[self.X_sample_stride*i + important_features[f]*self.X_feature_stride],
  File "sklearn/tree/_criterion.pyx", line 68, in sklearn.tree._criterion.prob_region
    return stats.norm.cdf(right_f, x, sigma) - stats.norm.cdf(left_f, x, sigma)
  File "/home/karl/anaconda3/envs/prenv/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py", line 2177, in cdf
    goodargs = argsreduce(cond, *((x,)+args))
  File "/home/karl/anaconda3/envs/prenv/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py", line 576, in argsreduce
    if np.all(cond):
  File "<__array_function__ internals>", line 179, in all
KeyboardInterrupt
/home/karl/RTER/comparison/PRT/sklearn/utils/multiclass.py:14: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.
  from scipy.sparse.base import spmatrix
0 0.05 0.02 19.665
0 0.05 0.05 23.198
0 0.05 0.1 25.709
0 0.05 0.2 46.164
0 0.1 0.02 17.806
0 0.1 0.05 21.515
0 0.1 0.1 23.966
0 0.1 0.2 44.019
0 0.2 0.02 19.374
0 0.2 0.05 18.734
0 0.2 0.1 22.557
0 0.2 0.2 37.821
0 0.25 0.02 20.213
0 0.25 0.05 18.313
0 0.25 0.1 21.640
0 0.25 0.2 37.043
0 0.5 0.02 17.678
0 0.5 0.05 17.965
0 0.5 0.1 21.629
0 0.5 0.2 35.622
0 0.75 0.02 52.061
0 0.75 0.05 16.755
0 0.75 0.1 18.738
0 0.75 0.2 34.843
0 1 0.02 17.708
0 1 0.05 16.212
0 1 0.1 17.103
0 1 0.2 35.362
0 1.25 0.02 39.504
0 1.25 0.05 16.965
0 1.25 0.1 17.610
0 1.25 0.2 37.155
0 1.5 0.02 41.418
0 1.5 0.05 20.124
0 1.5 0.1 47.533
0 1.5 0.2 40.751
0 1.75 0.02 134.642
0 1.75 0.05 25.064
0 1.75 0.1 63.571
0 1.75 0.2 47.055
0 2 0.02 75.869
0 2 0.05 36.002
0 2 0.1 96.222
0 2 0.2 57.299
0 5 0.02 82024.316
0 5 0.05 35.541
0 5 0.1 585.879
0 5 0.2 1346.963
0 10 0.02 1293.454
0 10 0.05 1076.354
0 10 0.1 5722.055
0 10 0.2 13835.370
Best 0 1 0.1 19.376
1 0.05 0.02 18.743
1 0.05 0.05 20.777
1 0.05 0.1 20.361
1 0.05 0.2 38.591
1 0.1 0.02 15.651
1 0.1 0.05 19.752
1 0.1 0.1 20.038
1 0.1 0.2 36.275
1 0.2 0.02 20.318
1 0.2 0.05 17.455
1 0.2 0.1 16.543
1 0.2 0.2 29.195
1 0.25 0.02 15.451
1 0.25 0.05 15.497
1 0.25 0.1 15.550
1 0.25 0.2 27.448
1 0.5 0.02 15.314
1 0.5 0.05 15.357
1 0.5 0.1 13.975
1 0.5 0.2 24.835
1 0.75 0.02 16.486
1 0.75 0.05 12.694
1 0.75 0.1 13.885
1 0.75 0.2 29.054
1 1 0.02 13.428
1 1 0.05 10.712
1 1 0.1 13.786
1 1 0.2 29.355
1 1.25 0.02 12.143
1 1.25 0.05 10.468
1 1.25 0.1 15.113
1 1.25 0.2 30.020
1 1.5 0.02 19.429
1 1.5 0.05 12.633
1 1.5 0.1 15.559
1 1.5 0.2 31.003
1 1.75 0.02 14.718
1 1.75 0.05 12.496
1 1.75 0.1 15.882
1 1.75 0.2 32.166
1 2 0.02 10.324
1 2 0.05 14.483
1 2 0.1 15.401
1 2 0.2 33.326
1 5 0.02 19.609
1 5 0.05 15.867
1 5 0.1 16.197
1 5 0.2 38.530
1 10 0.02 44.131
1 10 0.05 11.042
1 10 0.1 16.908
1 10 0.2 39.672
Best 1 2 0.05 18.145
2 0.05 0.02 27.039
2 0.05 0.05 31.827
2 0.05 0.1 33.097
2 0.05 0.2 53.482
2 0.1 0.02 25.457
2 0.1 0.05 33.457
2 0.1 0.1 32.200
2 0.1 0.2 52.159
2 0.2 0.02 20.289
2 0.2 0.05 26.143
2 0.2 0.1 29.626
2 0.2 0.2 49.541
Traceback (most recent call last):
  File "/home/karl/RTER/comparison/PRT/PRT.py", line 86, in <module>
    regressor.fit(X_tr_valid, y_tr_valid)
  File "/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py", line 1721, in fit
    super(DecisionTreeRegressor, self).fit(
  File "/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py", line 447, in fit
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted)
  File "sklearn/tree/_tree.pyx", line 662, in sklearn.tree._tree.BreadthFirstTreeBuilder.build
    cpdef build(self, Tree tree, object X, np.ndarray y,
  File "sklearn/tree/_tree.pyx", line 797, in sklearn.tree._tree.BreadthFirstTreeBuilder.build
    splitter.node_split(impurity, &split, &n_constant_features)
  File "sklearn/tree/_splitter.pyx", line 2228, in sklearn.tree._splitter.TopK3S1SplitterProb.node_split
    self.criterion.update3(current.pos, current.feature, current.threshold)#Have I to modify/update before threshold
  File "sklearn/tree/_criterion.pyx", line 1778, in sklearn.tree._criterion.MSEPROB.update3
    _pb_r = prob_region(self.X[self.X_sample_stride*i + important_features[f]*self.X_feature_stride],
  File "sklearn/tree/_criterion.pyx", line 60, in sklearn.tree._criterion.prob_region
    return 1 - stats.norm.cdf(left_f, x, sigma)
  File "/home/karl/anaconda3/envs/prenv/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py", line 2170, in cdf
    cond1 = self._open_support_mask(x, *args) & (scale > 0)
  File "/home/karl/anaconda3/envs/prenv/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py", line 993, in _open_support_mask
    with np.errstate(invalid='ignore'):
  File "/home/karl/anaconda3/envs/prenv/lib/python3.10/site-packages/numpy/core/_ufunc_config.py", line 430, in __enter__
    self.oldstate = seterr(**self.kwargs)
  File "/home/karl/anaconda3/envs/prenv/lib/python3.10/site-packages/numpy/core/_ufunc_config.py", line 110, in seterr
    old = geterr()
KeyboardInterrupt
/home/karl/RTER/comparison/PRT/sklearn/utils/multiclass.py:14: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.
  from scipy.sparse.base import spmatrix
0 0.05 0.02 19.665
0 0.05 0.05 23.198
0 0.05 0.1 25.709
0 0.05 0.2 46.164
0 0.1 0.02 17.806
0 0.1 0.05 21.515
0 0.1 0.1 23.966
0 0.1 0.2 44.019
0 0.2 0.02 19.374
0 0.2 0.05 18.734
0 0.2 0.1 22.557
0 0.2 0.2 37.821
0 0.25 0.02 20.213
0 0.25 0.05 18.313
0 0.25 0.1 21.640
0 0.25 0.2 37.043
0 0.5 0.02 17.678
0 0.5 0.05 17.965
0 0.5 0.1 21.629
0 0.5 0.2 35.622
0 0.75 0.02 52.061
0 0.75 0.05 16.755
0 0.75 0.1 18.738
0 0.75 0.2 34.843
0 1 0.02 17.708
0 1 0.05 16.212
0 1 0.1 17.103
0 1 0.2 35.362
0 1.25 0.02 39.504
0 1.25 0.05 16.965
0 1.25 0.1 17.610
0 1.25 0.2 37.155
0 1.5 0.02 41.418
0 1.5 0.05 20.124
0 1.5 0.1 47.533
0 1.5 0.2 40.751
0 1.75 0.02 134.642
0 1.75 0.05 25.064
0 1.75 0.1 63.571
0 1.75 0.2 47.055
0 2 0.02 75.869
0 2 0.05 36.002
0 2 0.1 96.222
0 2 0.2 57.299
0 5 0.02 82024.316
0 5 0.05 35.541
0 5 0.1 585.879
0 5 0.2 1346.963
0 10 0.02 1293.454
0 10 0.05 1076.354
0 10 0.1 5722.055
0 10 0.2 13835.370
Best 0 1 0.1 19.376
1 0.05 0.02 18.743
1 0.05 0.05 20.777
1 0.05 0.1 20.361
1 0.05 0.2 38.591
1 0.1 0.02 15.651
1 0.1 0.05 19.752
1 0.1 0.1 20.038
1 0.1 0.2 36.275
1 0.2 0.02 20.318
1 0.2 0.05 17.455
1 0.2 0.1 16.543
1 0.2 0.2 29.195
1 0.25 0.02 15.451
1 0.25 0.05 15.497
1 0.25 0.1 15.550
1 0.25 0.2 27.448
1 0.5 0.02 15.314
1 0.5 0.05 15.357
1 0.5 0.1 13.975
1 0.5 0.2 24.835
1 0.75 0.02 16.486
1 0.75 0.05 12.694
1 0.75 0.1 13.885
1 0.75 0.2 29.054
1 1 0.02 13.428
1 1 0.05 10.712
1 1 0.1 13.786
1 1 0.2 29.355
1 1.25 0.02 12.143
1 1.25 0.05 10.468
1 1.25 0.1 15.113
1 1.25 0.2 30.020
1 1.5 0.02 19.429
1 1.5 0.05 12.633
1 1.5 0.1 15.559
1 1.5 0.2 31.003
1 1.75 0.02 14.718
1 1.75 0.05 12.496
1 1.75 0.1 15.882
1 1.75 0.2 32.166
1 2 0.02 10.324
1 2 0.05 14.483
1 2 0.1 15.401
1 2 0.2 33.326
1 5 0.02 19.609
1 5 0.05 15.867
1 5 0.1 16.197
1 5 0.2 38.530
1 10 0.02 44.131
1 10 0.05 11.042
1 10 0.1 16.908
1 10 0.2 39.672
Best 1 2 0.05 18.145
2 0.05 0.02 27.039
2 0.05 0.05 31.827
2 0.05 0.1 33.097
2 0.05 0.2 53.482
2 0.1 0.02 25.457
2 0.1 0.05 33.457
2 0.1 0.1 32.200
2 0.1 0.2 52.159
2 0.2 0.02 20.289
2 0.2 0.05 26.143
2 0.2 0.1 29.626
2 0.2 0.2 49.541
2 0.25 0.02 19.165
2 0.25 0.05 22.000
2 0.25 0.1 29.603
2 0.25 0.2 49.318
2 0.5 0.02 12.107
2 0.5 0.05 18.859
2 0.5 0.1 27.642
2 0.5 0.2 40.006
2 0.75 0.02 15.571
2 0.75 0.05 12.565
2 0.75 0.1 18.971
2 0.75 0.2 35.837
2 1 0.02 13.785
2 1 0.05 15.589
2 1 0.1 18.280
2 1 0.2 34.179
2 1.25 0.02 10.775
2 1.25 0.05 18.026
2 1.25 0.1 20.022
2 1.25 0.2 37.596
2 1.5 0.02 10.635
2 1.5 0.05 17.370
2 1.5 0.1 19.231
2 1.5 0.2 37.032
2 1.75 0.02 15.847
2 1.75 0.05 20.883
2 1.75 0.1 19.594
2 1.75 0.2 36.690
2 2 0.02 22.564
2 2 0.05 26.957
2 2 0.1 20.007
2 2 0.2 36.472
2 5 0.02 19.264
2 5 0.05 16.949
2 5 0.1 22.454
2 5 0.2 35.929
2 10 0.02 15.061
2 10 0.05 15.973
2 10 0.1 23.042
2 10 0.2 35.864
Best 2 1.5 0.05 17.751
0 0.05 0.02 9.178
0 0.05 0.05 9.240
0 0.05 0.1 10.515
0 0.05 0.2 19.729
0 0.1 0.02 8.796
0 0.1 0.05 8.502
0 0.1 0.1 9.192
0 0.1 0.2 18.715
0 0.2 0.02 9.197
0 0.2 0.05 7.485
0 0.2 0.1 8.135
0 0.2 0.2 16.304
0 0.25 0.02 8.663
0 0.25 0.05 9.452
0 0.25 0.1 7.663
0 0.25 0.2 15.038
0 0.5 0.02 8.585
0 0.5 0.05 7.322
0 0.5 0.1 6.562
0 0.5 0.2 10.303
0 0.75 0.02 8.379
0 0.75 0.05 6.550
0 0.75 0.1 6.255
0 0.75 0.2 8.164
0 1 0.02 7.164
0 1 0.05 6.415
0 1 0.1 6.417
0 1 0.2 7.453
0 1.25 0.02 7.738
0 1.25 0.05 6.205
0 1.25 0.1 6.031
0 1.25 0.2 7.300
0 1.5 0.02 7.967
0 1.5 0.05 6.019
0 1.5 0.1 5.516
0 1.5 0.2 7.348
0 1.75 0.02 8.547
0 1.75 0.05 5.830
0 1.75 0.1 6.175
0 1.75 0.2 7.462
0 2 0.02 7.622
0 2 0.05 5.887
0 2 0.1 6.198
0 2 0.2 7.589
0 5 0.02 6.149
0 5 0.05 6.346
0 5 0.1 5.770
0 5 0.2 8.466
0 10 0.02 7.541
0 10 0.05 5.321
0 10 0.1 5.764
0 10 0.2 8.996
Best 0 10 0.1 8.747
1 0.05 0.02 10.405
1 0.05 0.05 14.825
1 0.05 0.1 15.269
1 0.05 0.2 20.282
1 0.1 0.02 9.378
1 0.1 0.05 12.940
1 0.1 0.1 13.309
1 0.1 0.2 19.164
1 0.2 0.02 8.461
1 0.2 0.05 9.710
1 0.2 0.1 12.404
1 0.2 0.2 18.418
1 0.25 0.02 10.861
1 0.25 0.05 9.146
1 0.25 0.1 10.299
1 0.25 0.2 16.526
1 0.5 0.02 7.476
1 0.5 0.05 7.955
1 0.5 0.1 8.277
1 0.5 0.2 12.025
1 0.75 0.02 8.219
1 0.75 0.05 7.911
1 0.75 0.1 7.892
1 0.75 0.2 10.593
1 1 0.02 9.978
1 1 0.05 7.983
1 1 0.1 7.985
1 1 0.2 9.836
1 1.25 0.02 7.567
1 1.25 0.05 8.148
1 1.25 0.1 9.338
1 1.25 0.2 9.450
1 1.5 0.02 8.193
1 1.5 0.05 8.287
1 1.5 0.1 9.121
1 1.5 0.2 9.290
1 1.75 0.02 7.008
1 1.75 0.05 8.238
1 1.75 0.1 7.825
1 1.75 0.2 9.254
1 2 0.02 7.278
1 2 0.05 8.258
1 2 0.1 7.837
1 2 0.2 9.289
1 5 0.02 9.222
1 5 0.05 8.631
1 5 0.1 7.697
1 5 0.2 10.028
1 10 0.02 10.567
1 10 0.05 7.196
1 10 0.1 7.366
1 10 0.2 10.685
Best 1 1.75 0.05 11.226
2 0.05 0.02 9.249
2 0.05 0.05 10.305
2 0.05 0.1 14.298
2 0.05 0.2 16.286
2 0.1 0.02 20.489
2 0.1 0.05 12.901
2 0.1 0.1 11.592
2 0.1 0.2 14.771
2 0.2 0.02 9.627
2 0.2 0.05 10.853
2 0.2 0.1 7.927
2 0.2 0.2 11.541
2 0.25 0.02 8.910
2 0.25 0.05 7.924
2 0.25 0.1 7.502
2 0.25 0.2 10.584
2 0.5 0.02 8.458
2 0.5 0.05 8.468
2 0.5 0.1 7.026
2 0.5 0.2 8.824
2 0.75 0.02 11.267
2 0.75 0.05 8.379
2 0.75 0.1 7.297
2 0.75 0.2 8.410
2 1 0.02 12.979
2 1 0.05 8.377
2 1 0.1 7.734
2 1 0.2 9.210
2 1.25 0.02 12.403
2 1.25 0.05 8.521
2 1.25 0.1 8.084
2 1.25 0.2 9.288
2 1.5 0.02 11.345
2 1.5 0.05 8.612
2 1.5 0.1 8.337
2 1.5 0.2 9.362
2 1.75 0.02 12.661
2 1.75 0.05 7.861
2 1.75 0.1 8.134
2 1.75 0.2 9.432
2 2 0.02 10.459
2 2 0.05 8.037
2 2 0.1 8.160
2 2 0.2 9.495
2 5 0.02 8.203
2 5 0.05 7.739
2 5 0.1 8.124
2 5 0.2 9.893
2 10 0.02 9.308
2 10 0.05 7.338
2 10 0.1 8.070
2 10 0.2 10.073
Best 2 0.5 0.2 17.596
0 0.05 0.02 0.015
0 0.05 0.05 0.016
0 0.05 0.1 0.017
0 0.05 0.2 0.020
0 0.1 0.02 0.015
0 0.1 0.05 0.015
0 0.1 0.1 0.016
0 0.1 0.2 0.019
0 0.2 0.02 0.014
0 0.2 0.05 0.014
0 0.2 0.1 0.016
0 0.2 0.2 0.018
0 0.25 0.02 0.014
0 0.25 0.05 0.014
0 0.25 0.1 0.016
0 0.25 0.2 0.018
0 0.5 0.02 0.012
0 0.5 0.05 0.015
0 0.5 0.1 0.016
0 0.5 0.2 0.018
0 0.75 0.02 0.012
0 0.75 0.05 0.015
0 0.75 0.1 0.016
0 0.75 0.2 0.018
0 1 0.02 0.012
Traceback (most recent call last):
  File "/home/karl/RTER/comparison/PRT/PRT.py", line 86, in <module>
    regressor.fit(X_tr_valid, y_tr_valid)
  File "/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py", line 1721, in fit
    super(DecisionTreeRegressor, self).fit(
  File "/home/karl/RTER/comparison/PRT/sklearn/tree/tree.py", line 447, in fit
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted)
  File "sklearn/tree/_tree.pyx", line 662, in sklearn.tree._tree.BreadthFirstTreeBuilder.build
    cpdef build(self, Tree tree, object X, np.ndarray y,
  File "sklearn/tree/_tree.pyx", line 797, in sklearn.tree._tree.BreadthFirstTreeBuilder.build
    splitter.node_split(impurity, &split, &n_constant_features)
  File "sklearn/tree/_splitter.pyx", line 2249, in sklearn.tree._splitter.TopK3S1SplitterProb.node_split
    self.criterion.reset2()
  File "sklearn/tree/_criterion.pyx", line 1611, in sklearn.tree._criterion.MSEPROB.reset2
    self.preg = np.delete(self.preg, self.preg.shape[1]-1, axis=1)
  File "<__array_function__ internals>", line 177, in delete
KeyboardInterrupt
/home/karl/RTER/comparison/PRT/sklearn/utils/multiclass.py:14: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.
  from scipy.sparse.base import spmatrix
0 0.05 0.02 0.032
0 0.05 0.05 0.028
0 0.05 0.1 0.028
0 0.05 0.2 0.026
0 0.1 0.02 0.028
0 0.1 0.05 0.028
0 0.1 0.1 0.026
0 0.1 0.2 0.025
0 0.2 0.02 0.027
0 0.2 0.05 0.027
0 0.2 0.1 0.025
0 0.2 0.2 0.025
0 0.25 0.02 0.023
0 0.25 0.05 0.026
0 0.25 0.1 0.026
0 0.25 0.2 0.025
0 0.5 0.02 0.016
0 0.5 0.05 0.022
0 0.5 0.1 0.026
0 0.5 0.2 0.024
0 0.75 0.02 0.021
0 0.75 0.05 0.016
0 0.75 0.1 0.025
0 0.75 0.2 0.024
0 1 0.02 0.016
0 1 0.05 0.021
0 1 0.1 0.024
0 1 0.2 0.024
0 1.25 0.02 0.020
0 1.25 0.05 0.018
0 1.25 0.1 0.019
0 1.25 0.2 0.024
0 1.5 0.02 0.040
0 1.5 0.05 0.021
0 1.5 0.1 0.020
0 1.5 0.2 0.024
0 1.75 0.02 0.023
0 1.75 0.05 0.021
0 1.75 0.1 0.019
0 1.75 0.2 0.024
0 2 0.02 0.017
0 2 0.05 0.021
0 2 0.1 0.019
0 2 0.2 0.023
0 5 0.02 0.041
0 5 0.05 0.021
0 5 0.1 0.019
0 5 0.2 0.024
0 10 0.02 0.024
0 10 0.05 0.021
0 10 0.1 0.019
0 10 0.2 0.024
Best 0 0.5 0.05 0.021
1 0.05 0.02 0.024
1 0.05 0.05 0.031
1 0.05 0.1 0.028
1 0.05 0.2 0.019
1 0.1 0.02 0.024
1 0.1 0.05 0.031
1 0.1 0.1 0.028
1 0.1 0.2 0.019
1 0.2 0.02 0.028
1 0.2 0.05 0.031
1 0.2 0.1 0.038
1 0.2 0.2 0.019
1 0.25 0.02 0.027
1 0.25 0.05 0.032
1 0.25 0.1 0.038
1 0.25 0.2 0.019
1 0.5 0.02 0.025
1 0.5 0.05 0.034
1 0.5 0.1 0.036
1 0.5 0.2 0.019
1 0.75 0.02 0.029
1 0.75 0.05 0.031
1 0.75 0.1 0.035
1 0.75 0.2 0.019
1 1 0.02 0.035
1 1 0.05 0.029
1 1 0.1 0.021
1 1 0.2 0.019
1 1.25 0.02 0.026
1 1.25 0.05 0.034
1 1.25 0.1 0.021
1 1.25 0.2 0.019
1 1.5 0.02 0.027
1 1.5 0.05 0.035
1 1.5 0.1 0.021
1 1.5 0.2 0.019
1 1.75 0.02 0.035
1 1.75 0.05 0.039
1 1.75 0.1 0.023
1 1.75 0.2 0.019
1 2 0.02 0.034
1 2 0.05 0.041
1 2 0.1 0.022
1 2 0.2 0.019
1 5 0.02 0.036
1 5 0.05 0.050
1 5 0.1 0.022
1 5 0.2 0.019
1 10 0.02 0.038
1 10 0.05 0.053
1 10 0.1 0.024
1 10 0.2 0.019
Best 1 1.5 0.25 0.033
2 0.05 0.02 0.028
2 0.05 0.05 0.019
2 0.05 0.1 0.029
2 0.05 0.2 0.028
2 0.1 0.02 0.022
2 0.1 0.05 0.034
2 0.1 0.1 0.027
2 0.1 0.2 0.028
2 0.2 0.02 0.030
2 0.2 0.05 0.030
2 0.2 0.1 0.027
2 0.2 0.2 0.028
2 0.25 0.02 0.037
2 0.25 0.05 0.029
2 0.25 0.1 0.027
2 0.25 0.2 0.028
2 0.5 0.02 0.028
2 0.5 0.05 0.024
2 0.5 0.1 0.024
2 0.5 0.2 0.029
2 0.75 0.02 0.036
2 0.75 0.05 0.022
2 0.75 0.1 0.024
2 0.75 0.2 0.028
2 1 0.02 0.034
2 1 0.05 0.032
2 1 0.1 0.023
2 1 0.2 0.028
2 1.25 0.02 0.046
2 1.25 0.05 0.030
2 1.25 0.1 0.023
2 1.25 0.2 0.027
2 1.5 0.02 0.049
2 1.5 0.05 0.029
2 1.5 0.1 0.023
2 1.5 0.2 0.026
2 1.75 0.02 0.042
2 1.75 0.05 0.028
2 1.75 0.1 0.023
2 1.75 0.2 0.026
2 2 0.02 0.046
2 2 0.05 0.028
2 2 0.1 0.023
2 2 0.2 0.026
2 5 0.02 0.062
2 5 0.05 0.034
2 5 0.1 0.024
2 5 0.2 0.022
2 10 0.02 0.043
2 10 0.05 0.029
2 10 0.1 0.023
2 10 0.2 0.022
Best 2 0.05 0.1 0.015
3 0.05 0.02 0.017
3 0.05 0.05 0.021
3 0.05 0.1 0.024
3 0.05 0.2 0.024
3 0.1 0.02 0.013
3 0.1 0.05 0.018
3 0.1 0.1 0.022
3 0.1 0.2 0.027
3 0.2 0.02 0.020
3 0.2 0.05 0.021
3 0.2 0.1 0.025
3 0.2 0.2 0.028
3 0.25 0.02 0.023
3 0.25 0.05 0.020
3 0.25 0.1 0.026
3 0.25 0.2 0.028
3 0.5 0.02 0.024
3 0.5 0.05 0.025
3 0.5 0.1 0.025
3 0.5 0.2 0.028
3 0.75 0.02 0.047
3 0.75 0.05 0.024
3 0.75 0.1 0.025
3 0.75 0.2 0.026
3 1 0.02 0.029
3 1 0.05 0.023
3 1 0.1 0.025
3 1 0.2 0.025
3 1.25 0.02 0.030
3 1.25 0.05 0.024
3 1.25 0.1 0.022
3 1.25 0.2 0.024
3 1.5 0.02 0.029
3 1.5 0.05 0.033
3 1.5 0.1 0.022
3 1.5 0.2 0.024
3 1.75 0.02 0.024
3 1.75 0.05 0.033
3 1.75 0.1 0.023
3 1.75 0.2 0.024
3 2 0.02 0.033
3 2 0.05 0.034
3 2 0.1 0.023
3 2 0.2 0.024
3 5 0.02 0.030
3 5 0.05 0.022
3 5 0.1 0.024
3 5 0.2 0.024
3 10 0.02 0.030
3 10 0.05 0.018
3 10 0.1 0.028
3 10 0.2 0.024
Best 3 0.1 0.05 0.026
4 0.05 0.02 0.035
4 0.05 0.05 0.025
4 0.05 0.1 0.033
4 0.05 0.2 0.035
4 0.1 0.02 0.028
4 0.1 0.05 0.024
4 0.1 0.1 0.032
4 0.1 0.2 0.035
4 0.2 0.02 0.038
4 0.2 0.05 0.038
4 0.2 0.1 0.033
4 0.2 0.2 0.035
4 0.25 0.02 0.040
4 0.25 0.05 0.038
4 0.25 0.1 0.034
4 0.25 0.2 0.035
4 0.5 0.02 0.032
4 0.5 0.05 0.039
4 0.5 0.1 0.036
4 0.5 0.2 0.036
4 0.75 0.02 0.033
4 0.75 0.05 0.036
4 0.75 0.1 0.036
4 0.75 0.2 0.035
4 1 0.02 0.030
4 1 0.05 0.036
4 1 0.1 0.036
4 1 0.2 0.034
4 1.25 0.02 0.040
4 1.25 0.05 0.037
4 1.25 0.1 0.036
4 1.25 0.2 0.034
4 1.5 0.02 0.030
4 1.5 0.05 0.037
4 1.5 0.1 0.036
4 1.5 0.2 0.034
4 1.75 0.02 0.038
4 1.75 0.05 0.037
4 1.75 0.1 0.036
4 1.75 0.2 0.034
4 2 0.02 0.036
4 2 0.05 0.038
4 2 0.1 0.035
4 2 0.2 0.034
4 5 0.02 0.025
4 5 0.05 0.037
4 5 0.1 0.033
4 5 0.2 0.032
4 10 0.02 0.037
4 10 0.05 0.043
4 10 0.1 0.032
4 10 0.2 0.032
Best 4 0.1 0.1 0.011
0 0.05 0.02 5.068
0 0.05 0.05 5.387
0 0.05 0.1 5.993
0 0.05 0.2 6.992
0 0.1 0.02 4.950
0 0.1 0.05 5.326
0 0.1 0.1 5.975
0 0.1 0.2 6.774
0 0.2 0.02 4.695
0 0.2 0.05 4.932
0 0.2 0.1 5.813
0 0.2 0.2 6.344
0 0.25 0.02 4.582
0 0.25 0.05 4.844
0 0.25 0.1 5.718
0 0.25 0.2 6.159
0 0.5 0.02 4.202
0 0.5 0.05 4.525
0 0.5 0.1 5.406
0 0.5 0.2 5.570
0 0.75 0.02 4.200
0 0.75 0.05 4.400
0 0.75 0.1 5.250
0 0.75 0.2 6.518
0 1 0.02 4.265
0 1 0.05 4.592
0 1 0.1 4.932
0 1 0.2 6.310
0 1.25 0.02 4.467
0 1.25 0.05 4.509
0 1.25 0.1 4.898
0 1.25 0.2 6.142
0 1.5 0.02 4.698
0 1.5 0.05 4.358
0 1.5 0.1 4.890
0 1.5 0.2 6.010
0 1.75 0.02 4.435
0 1.75 0.05 4.299
0 1.75 0.1 4.902
0 1.75 0.2 5.910
0 2 0.02 4.569
0 2 0.05 4.372
0 2 0.1 4.906
0 2 0.2 5.836
0 5 0.02 4.344
0 5 0.05 6.540
0 5 0.1 5.024
0 5 0.2 5.724
0 10 0.02 4.780
0 10 0.05 4.593
0 10 0.1 5.267
0 10 0.2 5.891
Best 0 0.75 0.05 4.321
1 0.05 0.02 5.197
1 0.05 0.05 5.967
1 0.05 0.1 6.603
1 0.05 0.2 7.767
1 0.1 0.02 5.046
1 0.1 0.05 5.661
1 0.1 0.1 6.416
1 0.1 0.2 7.646
1 0.2 0.02 4.794
1 0.2 0.05 5.266
1 0.2 0.1 6.179
1 0.2 0.2 7.466
1 0.25 0.02 4.864
1 0.25 0.05 5.173
1 0.25 0.1 6.032
1 0.25 0.2 7.400
1 0.5 0.02 4.612
1 0.5 0.05 4.827
1 0.5 0.1 5.653
1 0.5 0.2 7.170
1 0.75 0.02 4.585
1 0.75 0.05 4.703
1 0.75 0.1 5.407
1 0.75 0.2 6.782
1 1 0.02 4.601
1 1 0.05 4.687
1 1 0.1 5.332
1 1 0.2 6.539
1 1.25 0.02 4.759
1 1.25 0.05 4.733
1 1.25 0.1 4.962
1 1.25 0.2 6.351
1 1.5 0.02 4.720
1 1.5 0.05 4.742
1 1.5 0.1 4.919
1 1.5 0.2 6.202
1 1.75 0.02 4.636
1 1.75 0.05 4.718
1 1.75 0.1 4.909
1 1.75 0.2 6.085
1 2 0.02 4.733
1 2 0.05 4.731
1 2 0.1 4.897
1 2 0.2 5.992
1 5 0.02 5.514
1 5 0.05 4.848
1 5 0.1 5.084
1 5 0.2 5.775
1 10 0.02 7.466
1 10 0.05 5.231
1 10 0.1 5.227
1 10 0.2 5.918
Best 1 0.75 0.05 4.962
2 0.05 0.02 5.621
2 0.05 0.05 5.960
2 0.05 0.1 6.778
2 0.05 0.2 7.824
2 0.1 0.02 5.446
2 0.1 0.05 5.906
2 0.1 0.1 6.728
2 0.1 0.2 7.738
2 0.2 0.02 5.390
2 0.2 0.05 5.654
2 0.2 0.1 6.343
2 0.2 0.2 7.609
2 0.25 0.02 5.275
2 0.25 0.05 5.468
2 0.25 0.1 6.229
2 0.25 0.2 7.617
2 0.5 0.02 5.047
2 0.5 0.05 5.200
2 0.5 0.1 5.847
2 0.5 0.2 7.373
2 0.75 0.02 5.073
2 0.75 0.05 5.037
2 0.75 0.1 5.567
2 0.75 0.2 6.425
2 1 0.02 5.000
2 1 0.05 4.970
2 1 0.1 5.230
2 1 0.2 6.112
2 1.25 0.02 4.956
2 1.25 0.05 5.080
2 1.25 0.1 5.168
2 1.25 0.2 5.905
2 1.5 0.02 4.918
2 1.5 0.05 5.044
2 1.5 0.1 5.126
2 1.5 0.2 5.779
2 1.75 0.02 5.073
2 1.75 0.05 5.110
2 1.75 0.1 5.166
2 1.75 0.2 5.712
2 2 0.02 10.566
2 2 0.05 5.548
2 2 0.1 5.191
2 2 0.2 5.684
2 5 0.02 248.858
2 5 0.05 5.572
2 5 0.1 6.493
2 5 0.2 6.087
2 10 0.02 247.862
2 10 0.05 378.460
2 10 0.1 35.548
2 10 0.2 5.710
Best 2 1.5 0.05 4.676
3 0.05 0.02 5.611
3 0.05 0.05 5.782
3 0.05 0.1 6.339
3 0.05 0.2 7.032
3 0.1 0.02 5.353
3 0.1 0.05 5.631
3 0.1 0.1 6.172
3 0.1 0.2 6.848
3 0.2 0.02 5.280
3 0.2 0.05 5.436
3 0.2 0.1 5.954
3 0.2 0.2 6.534
3 0.25 0.02 5.242
3 0.25 0.05 5.405
3 0.25 0.1 6.045
3 0.25 0.2 6.396
3 0.5 0.02 4.906
3 0.5 0.05 5.266
3 0.5 0.1 5.710
3 0.5 0.2 5.955
3 0.75 0.02 4.740
3 0.75 0.05 5.234
3 0.75 0.1 5.526
3 0.75 0.2 5.771
3 1 0.02 4.844
3 1 0.05 5.209
3 1 0.1 5.552
3 1 0.2 6.494
3 1.25 0.02 4.955
3 1.25 0.05 5.243
3 1.25 0.1 5.478
3 1.25 0.2 6.363
3 1.5 0.02 4.780
3 1.5 0.05 5.176
3 1.5 0.1 5.425
3 1.5 0.2 6.275
3 1.75 0.02 4.876
3 1.75 0.05 5.257
3 1.75 0.1 5.056
3 1.75 0.2 6.229
3 2 0.02 4.867
3 2 0.05 4.849
3 2 0.1 5.039
3 2 0.2 6.221
3 5 0.02 4.711
3 5 0.05 4.877
3 5 0.1 5.069
3 5 0.2 6.360
3 10 0.02 4.766
3 10 0.05 4.851
3 10 0.1 4.917
3 10 0.2 5.497
Best 3 5 0.05 15.705
4 0.05 0.02 4.711
4 0.05 0.05 5.032
4 0.05 0.1 5.537
4 0.05 0.2 6.668
4 0.1 0.02 4.521
4 0.1 0.05 4.865
4 0.1 0.1 5.499
4 0.1 0.2 6.558
4 0.2 0.02 4.256
4 0.2 0.05 4.578
4 0.2 0.1 5.298
4 0.2 0.2 6.427
4 0.25 0.02 4.231
4 0.25 0.05 4.497
4 0.25 0.1 5.213
4 0.25 0.2 6.382
4 0.5 0.02 4.046
4 0.5 0.05 4.157
4 0.5 0.1 4.977
4 0.5 0.2 6.222
4 0.75 0.02 3.916
4 0.75 0.05 4.012
4 0.75 0.1 4.722
4 0.75 0.2 5.204
4 1 0.02 3.870
4 1 0.05 4.033
4 1 0.1 4.562
4 1 0.2 4.953
4 1.25 0.02 3.898
4 1.25 0.05 4.092
4 1.25 0.1 4.309
4 1.25 0.2 4.774
4 1.5 0.02 4.015
4 1.5 0.05 4.027
4 1.5 0.1 4.228
4 1.5 0.2 4.659
4 1.75 0.02 4.025
4 1.75 0.05 4.050
4 1.75 0.1 4.178
4 1.75 0.2 4.599
4 2 0.02 3.942
4 2 0.05 3.916
4 2 0.1 4.405
4 2 0.2 4.579
4 5 0.02 3.813
4 5 0.05 4.103
4 5 0.1 4.159
4 5 0.2 4.941
4 10 0.02 3.843
4 10 0.05 4.418
4 10 0.1 4.339
4 10 0.2 5.066
Best 4 5 0.05 5.253
0 0.05 0.02 0.018
0 0.05 0.05 0.019
0 0.05 0.1 0.019
0 0.05 0.2 0.019
0 0.1 0.02 0.018
0 0.1 0.05 0.019
0 0.1 0.1 0.019
0 0.1 0.2 0.019
0 0.2 0.02 0.018
0 0.2 0.05 0.019
0 0.2 0.1 0.019
0 0.2 0.2 0.019
0 0.25 0.02 0.018
0 0.25 0.05 0.018
0 0.25 0.1 0.019
0 0.25 0.2 0.019
0 0.5 0.02 0.018
0 0.5 0.05 0.018
0 0.5 0.1 0.018
0 0.5 0.2 0.019
0 0.75 0.02 0.018
0 0.75 0.05 0.018
0 0.75 0.1 0.018
0 0.75 0.2 0.019
0 1 0.02 0.018
0 1 0.05 0.018
0 1 0.1 0.018
0 1 0.2 0.018
0 1.25 0.02 0.018
0 1.25 0.05 0.018
0 1.25 0.1 0.018
0 1.25 0.2 0.018
0 1.5 0.02 0.018
0 1.5 0.05 0.018
0 1.5 0.1 0.018
0 1.5 0.2 0.018
0 1.75 0.02 0.018
0 1.75 0.05 0.018
0 1.75 0.1 0.018
0 1.75 0.2 0.018
0 2 0.02 0.018
0 2 0.05 0.018
0 2 0.1 0.018
0 2 0.2 0.018
0 5 0.02 0.005
0 5 0.05 0.021
0 5 0.1 0.017
0 5 0.2 0.018
0 10 0.02 0.007
0 10 0.05 0.029
0 10 0.1 0.016
0 10 0.2 0.018
Best 0 5 0.05 0.000
1 0.05 0.02 0.000
1 0.05 0.05 0.000
1 0.05 0.1 0.000
1 0.05 0.2 0.000
1 0.1 0.02 0.000
1 0.1 0.05 0.000
1 0.1 0.1 0.000
1 0.1 0.2 0.000
1 0.2 0.02 0.000
1 0.2 0.05 0.000
1 0.2 0.1 0.000
1 0.2 0.2 0.000
1 0.25 0.02 0.000
1 0.25 0.05 0.000
1 0.25 0.1 0.000
1 0.25 0.2 0.000
1 0.5 0.02 0.000
1 0.5 0.05 0.000
1 0.5 0.1 0.000
1 0.5 0.2 0.000
1 0.75 0.02 0.000
1 0.75 0.05 0.000
1 0.75 0.1 0.000
1 0.75 0.2 0.000
1 1 0.02 0.000
1 1 0.05 0.000
1 1 0.1 0.000
1 1 0.2 0.000
1 1.25 0.02 0.000
1 1.25 0.05 0.000
1 1.25 0.1 0.000
1 1.25 0.2 0.000
1 1.5 0.02 0.000
1 1.5 0.05 0.000
1 1.5 0.1 0.000
1 1.5 0.2 0.000
1 1.75 0.02 0.000
1 1.75 0.05 0.000
1 1.75 0.1 0.000
1 1.75 0.2 0.000
1 2 0.02 0.000
1 2 0.05 0.000
1 2 0.1 0.000
1 2 0.2 0.000
1 5 0.02 0.000
1 5 0.05 0.000
1 5 0.1 0.000
1 5 0.2 0.000
1 10 0.02 0.000
1 10 0.05 0.000
1 10 0.1 0.000
1 10 0.2 0.000
Best 1 5 0.25 0.012
2 0.05 0.02 0.014
2 0.05 0.05 0.001
2 0.05 0.1 0.001
2 0.05 0.2 0.000
2 0.1 0.02 0.015
2 0.1 0.05 0.003
2 0.1 0.1 0.001
2 0.1 0.2 0.000
2 0.2 0.02 0.009
2 0.2 0.05 0.005
2 0.2 0.1 0.001
2 0.2 0.2 0.000
2 0.25 0.02 0.012
2 0.25 0.05 0.006
2 0.25 0.1 0.002
2 0.25 0.2 0.000
2 0.5 0.02 0.020
2 0.5 0.05 0.005
2 0.5 0.1 0.004
2 0.5 0.2 0.003
2 0.75 0.02 0.004
2 0.75 0.05 0.008
2 0.75 0.1 0.011
2 0.75 0.2 0.002
2 1 0.02 0.000
2 1 0.05 0.006
2 1 0.1 0.010
2 1 0.2 0.003
2 1.25 0.02 0.003
2 1.25 0.05 0.004
2 1.25 0.1 0.006
2 1.25 0.2 0.004
2 1.5 0.02 0.001
2 1.5 0.05 0.001
2 1.5 0.1 0.003
2 1.5 0.2 0.004
2 1.75 0.02 0.001
2 1.75 0.05 0.001
2 1.75 0.1 0.002
2 1.75 0.2 0.004
2 2 0.02 0.000
2 2 0.05 0.001
2 2 0.1 0.001
2 2 0.2 0.004
2 5 0.02 0.000
2 5 0.05 0.000
2 5 0.1 0.000
2 5 0.2 0.002
2 10 0.02 0.000
2 10 0.05 0.000
2 10 0.1 0.000
2 10 0.2 0.001
Best 2 10 0.1 0.000
3 0.05 0.02 0.000
3 0.05 0.05 0.002
3 0.05 0.1 0.001
3 0.05 0.2 0.000
3 0.1 0.02 0.000
3 0.1 0.05 0.002
3 0.1 0.1 0.002
3 0.1 0.2 0.000
3 0.2 0.02 0.001
3 0.2 0.05 0.002
3 0.2 0.1 0.002
3 0.2 0.2 0.000
3 0.25 0.02 0.002
3 0.25 0.05 0.002
3 0.25 0.1 0.002
3 0.25 0.2 0.000
3 0.5 0.02 0.007
3 0.5 0.05 0.000
3 0.5 0.1 0.001
3 0.5 0.2 0.002
3 0.75 0.02 0.001
3 0.75 0.05 0.003
3 0.75 0.1 0.000
3 0.75 0.2 0.001
3 1 0.02 0.001
3 1 0.05 0.000
3 1 0.1 0.000
3 1 0.2 0.001
3 1.25 0.02 0.000
3 1.25 0.05 0.000
3 1.25 0.1 0.000
3 1.25 0.2 0.000
3 1.5 0.02 0.000
3 1.5 0.05 0.000
3 1.5 0.1 0.000
3 1.5 0.2 0.000
3 1.75 0.02 0.000
3 1.75 0.05 0.000
3 1.75 0.1 0.000
3 1.75 0.2 0.000
3 2 0.02 0.000
3 2 0.05 0.000
3 2 0.1 0.000
3 2 0.2 0.000
3 5 0.02 0.000
3 5 0.05 0.000
3 5 0.1 0.000
3 5 0.2 0.000
3 10 0.02 0.000
3 10 0.05 0.000
3 10 0.1 0.000
3 10 0.2 0.000
Best 3 5 0.2 0.000
4 0.05 0.02 0.012
4 0.05 0.05 0.003
4 0.05 0.1 0.001
4 0.05 0.2 0.001
4 0.1 0.02 0.021
4 0.1 0.05 0.003
4 0.1 0.1 0.001
4 0.1 0.2 0.001
4 0.2 0.02 0.034
4 0.2 0.05 0.006
4 0.2 0.1 0.001
4 0.2 0.2 0.001
4 0.25 0.02 0.031
4 0.25 0.05 0.010
4 0.25 0.1 0.002
4 0.25 0.2 0.001
4 0.5 0.02 0.000
4 0.5 0.05 0.022
4 0.5 0.1 0.001
4 0.5 0.2 0.006
4 0.75 0.02 0.000
4 0.75 0.05 0.015
4 0.75 0.1 0.017
4 0.75 0.2 0.015
4 1 0.02 0.000
4 1 0.05 0.015
4 1 0.1 0.008
4 1 0.2 0.013
4 1.25 0.02 0.002
4 1.25 0.05 0.012
4 1.25 0.1 0.003
4 1.25 0.2 0.007
4 1.5 0.02 0.000
4 1.5 0.05 0.006
4 1.5 0.1 0.003
4 1.5 0.2 0.004
4 1.75 0.02 0.000
4 1.75 0.05 0.002
4 1.75 0.1 0.002
4 1.75 0.2 0.002
4 2 0.02 0.000
4 2 0.05 0.001
4 2 0.1 0.001
4 2 0.2 0.001
4 5 0.02 0.000
4 5 0.05 0.000
4 5 0.1 0.000
4 5 0.2 0.000
4 10 0.02 0.000
4 10 0.05 0.000
4 10 0.1 0.000
4 10 0.2 0.000
Best 4 10 0.2 0.000
0 0.05 0.02 17.802
0 0.05 0.05 19.346
0 0.05 0.1 27.376
0 0.05 0.2 26.016
0 0.1 0.02 17.037
0 0.1 0.05 16.586
0 0.1 0.1 24.990
0 0.1 0.2 23.624
0 0.2 0.02 13.434
0 0.2 0.05 17.174
0 0.2 0.1 22.735
0 0.2 0.2 21.207
0 0.25 0.02 15.851
0 0.25 0.05 15.816
0 0.25 0.1 24.411
0 0.25 0.2 20.505
0 0.5 0.02 10.597
0 0.5 0.05 12.910
0 0.5 0.1 18.732
0 0.5 0.2 17.726
0 0.75 0.02 12.948
0 0.75 0.05 16.020
0 0.75 0.1 13.950
0 0.75 0.2 17.702
0 1 0.02 12.964
0 1 0.05 12.414
0 1 0.1 13.748
0 1 0.2 18.916
0 1.25 0.02 27.135
0 1.25 0.05 14.904
0 1.25 0.1 14.254
0 1.25 0.2 22.419
0 1.5 0.02 78.179
0 1.5 0.05 11.988
0 1.5 0.1 15.558
0 1.5 0.2 24.252
0 1.75 0.02 46.332
0 1.75 0.05 12.326
0 1.75 0.1 17.210
0 1.75 0.2 27.011
0 2 0.02 52.630
0 2 0.05 13.049
0 2 0.1 19.980
0 2 0.2 31.295
0 5 0.02 15370.332
0 5 0.05 58.856
0 5 0.1 907.587
0 5 0.2 640.444
0 10 0.02 17977.025
0 10 0.05 22.851
0 10 0.1 9613.264
0 10 0.2 9807.345
Best 0 0.5 0.05 15.307
1 0.05 0.02 34.008
1 0.05 0.05 39.243
1 0.05 0.1 52.846
1 0.05 0.2 75.844
1 0.1 0.02 30.480
1 0.1 0.05 34.156
1 0.1 0.1 48.414
1 0.1 0.2 75.252
1 0.2 0.02 19.602
1 0.2 0.05 25.988
1 0.2 0.1 29.738
1 0.2 0.2 46.610
1 0.25 0.02 17.531
1 0.25 0.05 25.330
1 0.25 0.1 28.878
1 0.25 0.2 45.029
1 0.5 0.02 18.574
1 0.5 0.05 20.586
1 0.5 0.1 28.448
1 0.5 0.2 45.803
1 0.75 0.02 26.476
1 0.75 0.05 28.336
1 0.75 0.1 28.461
1 0.75 0.2 74.753
1 1 0.02 25.437
1 1 0.05 33.862
1 1 0.1 31.546
1 1 0.2 75.377
1 1.25 0.02 47.940
1 1.25 0.05 30.412
1 1.25 0.1 29.613
1 1.25 0.2 76.797
1 1.5 0.02 30.367
1 1.5 0.05 43.647
1 1.5 0.1 30.322
1 1.5 0.2 78.581
1 1.75 0.02 41.065
1 1.75 0.05 65.294
1 1.75 0.1 32.720
1 1.75 0.2 77.174
1 2 0.02 49.725
1 2 0.05 96.610
1 2 0.1 37.053
1 2 0.2 61.551
1 5 0.02 91110.106
1 5 0.05 7975.793
1 5 0.1 540.054
1 5 0.2 77.547
1 10 0.02 1836.826
1 10 0.05 161094.227
1 10 0.1 4668.687
1 10 0.2 708.226
Best 1 0.25 0.05 17.357
2 0.05 0.02 18.251
2 0.05 0.05 20.277
2 0.05 0.1 29.391
2 0.05 0.2 46.141
2 0.1 0.02 16.815
2 0.1 0.05 20.448
2 0.1 0.1 27.720
2 0.1 0.2 44.543
2 0.2 0.02 15.575
2 0.2 0.05 19.054
2 0.2 0.1 26.149
2 0.2 0.2 35.797
2 0.25 0.02 15.582
2 0.25 0.05 17.815
2 0.25 0.1 24.947
2 0.25 0.2 34.304
2 0.5 0.02 12.085
2 0.5 0.05 13.803
2 0.5 0.1 24.522
2 0.5 0.2 32.200
2 0.75 0.02 12.378
2 0.75 0.05 13.563
2 0.75 0.1 19.993
2 0.75 0.2 29.626
2 1 0.02 16.309
2 1 0.05 15.977
2 1 0.1 18.710
2 1 0.2 28.714
2 1.25 0.02 9.484
2 1.25 0.05 15.887
2 1.25 0.1 18.162
2 1.25 0.2 29.902
2 1.5 0.02 11.005
2 1.5 0.05 17.759
2 1.5 0.1 18.168
2 1.5 0.2 27.344
2 1.75 0.02 11.127
2 1.75 0.05 15.743
2 1.75 0.1 17.687
2 1.75 0.2 26.511
2 2 0.02 15.063
2 2 0.05 15.240
2 2 0.1 17.389
2 2 0.2 25.922
2 5 0.02 12.451
2 5 0.05 14.649
2 5 0.1 18.342
2 5 0.2 24.275
2 10 0.02 13.782
2 10 0.05 14.789
2 10 0.1 16.491
2 10 0.2 24.062
Best 2 1.25 0.05 17.061
3 0.05 0.02 20.193
3 0.05 0.05 23.505
3 0.05 0.1 33.637
3 0.05 0.2 48.911
3 0.1 0.02 19.133
3 0.1 0.05 19.770
3 0.1 0.1 30.510
3 0.1 0.2 47.223
3 0.2 0.02 22.781
3 0.2 0.05 19.688
3 0.2 0.1 30.072
3 0.2 0.2 43.867
3 0.25 0.02 22.290
3 0.25 0.05 19.873
3 0.25 0.1 30.149
3 0.25 0.2 42.751
3 0.5 0.02 19.565
3 0.5 0.05 17.169
3 0.5 0.1 29.571
3 0.5 0.2 42.268
3 0.75 0.02 14.598
3 0.75 0.05 16.312
3 0.75 0.1 26.750
3 0.75 0.2 39.026
3 1 0.02 14.948
3 1 0.05 17.821
3 1 0.1 22.447
3 1 0.2 40.585
3 1.25 /home/karl/RTER/comparison/PRT/sklearn/utils/multiclass.py:14: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.
  from scipy.sparse.base import spmatrix
0.02 16.347
3 1.25 0.05 16.885
3 1.25 0.1 27.235
3 1.25 0.2 40.307
3 1.5 0.02 16.178
3 1.5 0.05 18.520
3 1.5 0.1 18.970
3 1.5 0.2 40.168
3 1.75 0.02 15.846
3 1.75 0.05 17.154
3 1.75 0.1 19.908
3 1.75 0.2 40.108
3 2 0.02 18.069
3 2 0.05 17.480
3 2 0.1 20.162
3 2 0.2 40.089
3 5 0.02 14.738
3 5 0.05 20.220
3 5 0.1 21.591
3 5 0.2 40.188
3 10 0.02 22.731
3 10 0.05 16.711
3 10 0.1 20.522
3 10 0.2 40.227
Best 3 0.75 0.05 13.832
4 0.05 0.02 11.624
4 0.05 0.05 11.018
4 0.05 0.1 19.862
4 0.05 0.2 30.438
4 0.1 0.02 8.894
4 0.1 0.05 9.898
4 0.1 0.1 17.773
4 0.1 0.2 28.787
4 0.2 0.02 9.187
4 0.2 0.05 8.078
4 0.2 0.1 15.471
4 0.2 0.2 27.295
4 0.25 0.02 10.356
4 0.25 0.05 8.148
4 0.25 0.1 15.761
4 0.25 0.2 25.558
4 0.5 0.02 8.429
4 0.5 0.05 7.674
4 0.5 0.1 15.275
4 0.5 0.2 25.777
4 0.75 0.02 8.423
4 0.75 0.05 7.748
4 0.75 0.1 10.710
4 0.75 0.2 25.041
4 1 0.02 9.562
4 1 0.05 9.866
4 1 0.1 10.049
4 1 0.2 24.743
4 1.25 0.02 8.773
4 1.25 0.05 9.368
4 1.25 0.1 10.482
4 1.25 0.2 24.679
4 1.5 0.02 10.007
4 1.5 0.05 8.561
4 1.5 0.1 10.488
4 1.5 0.2 24.786
4 1.75 0.02 9.952
4 1.75 0.05 11.645
4 1.75 0.1 10.501
4 1.75 0.2 25.014
4 2 0.02 11.568
4 2 0.05 9.096
4 2 0.1 10.512
4 2 0.2 25.296
4 5 0.02 12.696
4 5 0.05 9.982
4 5 0.1 10.560
4 5 0.2 26.913
4 10 0.02 11.835
4 10 0.05 9.845
4 10 0.1 10.566
4 10 0.2 27.346
Best 4 0.5 0.1 22.244
0 0.05 0.02 9.436
0 0.05 0.05 6.786
0 0.05 0.1 13.228
0 0.05 0.2 16.803
0 0.1 0.02 8.866
0 0.1 0.05 7.557
0 0.1 0.1 12.468
0 0.1 0.2 15.972
0 0.2 0.02 7.823
0 0.2 0.05 8.132
0 0.2 0.1 11.301
0 0.2 0.2 14.981
0 0.25 0.02 8.253
0 0.25 0.05 7.377
0 0.25 0.1 7.490
0 0.25 0.2 12.416
0 0.5 0.02 9.246
0 0.5 0.05 6.773
0 0.5 0.1 6.964
0 0.5 0.2 9.212
0 0.75 0.02 9.385
0 0.75 0.05 7.095
0 0.75 0.1 7.152
0 0.75 0.2 8.006
0 1 0.02 9.928
0 1 0.05 7.619
0 1 0.1 7.528
0 1 0.2 7.929
0 1.25 0.02 9.229
0 1.25 0.05 7.152
0 1.25 0.1 7.793
0 1.25 0.2 8.055
0 1.5 0.02 9.678
0 1.5 0.05 7.252
0 1.5 0.1 7.811
0 1.5 0.2 8.251
0 1.75 0.02 8.554
0 1.75 0.05 6.718
0 1.75 0.1 7.751
0 1.75 0.2 8.471
0 2 0.02 8.723
0 2 0.05 6.819
0 2 0.1 7.399
0 2 0.2 8.690
0 5 0.02 8.581
0 5 0.05 7.346
0 5 0.1 8.085
0 5 0.2 9.999
0 10 0.02 8.749
0 10 0.05 7.873
0 10 0.1 7.841
0 10 0.2 16.233
Best 0 1.75 0.1 7.922
1 0.05 0.02 9.529
1 0.05 0.05 9.529
1 0.05 0.1 11.889
1 0.05 0.2 17.423
1 0.1 0.02 10.118
1 0.1 0.05 8.909
1 0.1 0.1 11.151
1 0.1 0.2 16.755
1 0.2 0.02 9.724
1 0.2 0.05 8.501
1 0.2 0.1 10.341
1 0.2 0.2 15.663
1 0.25 0.02 9.617
1 0.25 0.05 8.339
1 0.25 0.1 9.980
1 0.25 0.2 15.171
1 0.5 0.02 12.458
1 0.5 0.05 7.958
1 0.5 0.1 8.011
1 0.5 0.2 10.687
1 0.75 0.02 11.608
1 0.75 0.05 8.192
1 0.75 0.1 7.759
1 0.75 0.2 9.444
1 1 0.02 10.079
1 1 0.05 8.128
1 1 0.1 7.704
1 1 0.2 9.228
1 1.25 0.02 9.794
1 1.25 0.05 8.136
1 1.25 0.1 7.374
1 1.25 0.2 8.789
1 1.5 0.02 10.814
1 1.5 0.05 8.648
1 1.5 0.1 8.520
1 1.5 0.2 8.865
1 1.75 0.02 11.391
1 1.75 0.05 8.968
1 1.75 0.1 8.411
1 1.75 0.2 9.004
1 2 0.02 8.808
1 2 0.05 9.000
1 2 0.1 8.328
1 2 0.2 9.160
1 5 0.02 10.015
1 5 0.05 8.953
1 5 0.1 8.665
1 5 0.2 10.091
1 10 0.02 9.049
1 10 0.05 9.357
1 10 0.1 9.042
1 10 0.2 13.605
Best 1 1.25 0.2 9.766
2 0.05 0.02 13.644
2 0.05 0.05 13.019
2 0.05 0.1 17.753
2 0.05 0.2 26.150
2 0.1 0.02 10.797
2 0.1 0.05 13.329
2 0.1 0.1 15.461
2 0.1 0.2 26.010
2 0.2 0.02 11.438
2 0.2 0.05 12.413
2 0.2 0.1 14.198
2 0.2 0.2 24.841
2 0.25 0.02 12.591
2 0.25 0.05 11.698
2 0.25 0.1 13.415
2 0.25 0.2 24.182
2 0.5 0.02 15.017
2 0.5 0.05 10.541
2 0.5 0.1 11.012
2 0.5 0.2 21.256
2 0.75 0.02 9.640
2 0.75 0.05 12.479
2 0.75 0.1 10.103
2 0.75 0.2 19.947
2 1 0.02 11.564
2 1 0.05 10.710
2 1 0.1 10.440
2 1 0.2 18.799
2 1.25 0.02 14.196
2 1.25 0.05 12.344
2 1.25 0.1 9.933
2 1.25 0.2 17.934
2 1.5 0.02 20.269
2 1.5 0.05 10.540
2 1.5 0.1 9.672
2 1.5 0.2 17.300
2 1.75 0.02 25.671
2 1.75 0.05 10.595
2 1.75 0.1 9.569
2 1.75 0.2 16.827
2 2 0.02 23.420
2 2 0.05 10.595
2 2 0.1 10.178
2 2 0.2 16.468
2 5 0.02 18.865
2 5 0.05 10.462
2 5 0.1 12.250
2 5 0.2 15.094
2 10 0.02 17.692
2 10 0.05 11.740
2 10 0.1 12.414
2 10 0.2 14.769
Best 2 1.75 0.2 10.942
3 0.05 0.02 9.166
3 0.05 0.05 11.541
3 0.05 0.1 13.082
3 0.05 0.2 18.105
3 0.1 0.02 8.448
3 0.1 0.05 10.215
3 0.1 0.1 11.767
3 0.1 0.2 16.641
3 0.2 0.02 8.823
3 0.2 0.05 7.943
3 0.2 0.1 9.976
3 0.2 0.2 14.745
3 0.25 0.02 8.198
3 0.25 0.05 7.571
3 0.25 0.1 9.337
3 0.25 0.2 14.235
3 0.5 0.02 6.646
3 0.5 0.05 6.507
3 0.5 0.1 7.564
3 0.5 0.2 13.618
3 0.75 0.02 6.738
3 0.75 0.05 5.450
3 0.75 0.1 6.635
3 0.75 0.2 12.949
3 1 0.02 6.624
3 1 0.05 5.336
3 1 0.1 6.330
3 1 0.2 12.517
3 1.25 0.02 7.207
3 1.25 0.05 5.185
3 1.25 0.1 6.240
3 1.25 0.2 12.191
3 1.5 0.02 6.685
3 1.5 0.05 5.945
3 1.5 0.1 7.232
3 1.5 0.2 11.958
3 1.75 0.02 6.398
3 1.75 0.05 7.086
3 1.75 0.1 7.393
3 1.75 0.2 12.122
3 2 0.02 6.940
3 2 0.05 5.204
3 2 0.1 8.638
3 2 0.2 12.033
3 5 0.02 5.579
3 5 0.05 5.971
3 5 0.1 6.363
3 5 0.2 11.777
3 10 0.02 8.063
3 10 0.05 6.001
3 10 0.1 6.110
3 10 0.2 11.783
Best 3 1.25 0.1 11.460
4 0.05 0.02 6.531
4 0.05 0.05 8.286
4 0.05 0.1 11.560
4 0.05 0.2 17.445
4 0.1 0.02 6.560
4 0.1 0.05 8.087
4 0.1 0.1 10.640
4 0.1 0.2 16.411
4 0.2 0.02 6.905
4 0.2 0.05 7.192
4 0.2 0.1 9.457
4 0.2 0.2 15.274
4 0.25 0.02 7.276
4 0.25 0.05 6.887
4 0.25 0.1 8.917
4 0.25 0.2 14.960
4 0.5 0.02 5.815
4 0.5 0.05 5.955
4 0.5 0.1 7.494
4 0.5 0.2 12.215
4 0.75 0.02 7.141
4 0.75 0.05 5.961
4 0.75 0.1 6.114
4 0.75 0.2 8.678
4 1 0.02 6.789
4 1 0.05 5.651
4 1 0.1 6.008
4 1 0.2 7.844
4 1.25 0.02 7.098
4 1.25 0.05 7.213
4 1.25 0.1 6.058
4 1.25 0.2 7.644
4 1.5 0.02 8.442
4 1.5 0.05 6.219
4 1.5 0.1 6.128
4 1.5 0.2 7.647
4 1.75 0.02 9.791
4 1.75 0.05 6.178
4 1.75 0.1 6.182
4 1.75 0.2 7.714
4 2 0.02 8.516
4 2 0.05 6.335
4 2 0.1 6.222
4 2 0.2 7.795
4 5 0.02 11.068
4 5 0.05 7.715
4 5 0.1 6.560
4 5 0.2 8.482
4 10 0.02 8.896
4 10 0.05 7.060
4 10 0.1 6.802
4 10 0.2 10.409
Best 4 1 0.1 8.884
0 0.05 0.02 0.014
0 0.05 0.05 0.016
0 0.05 0.1 0.019
0 0.05 0.2 0.022
0 0.1 0.02 0.014
0 0.1 0.05 0.016
0 0.1 0.1 0.018
0 0.1 0.2 0.022
0 0.2 0.02 0.014
0 0.2 0.05 0.015
0 0.2 0.1 0.017
0 0.2 0.2 0.021
0 0.25 0.02 0.014
0 0.25 0.05 0.015
0 0.25 0.1 0.016
0 0.25 0.2 0.021
0 0.5 0.02 0.013
0 0.5 0.05 0.014
0 0.5 0.1 0.016
0 0.5 0.2 0.019
0 0.75 0.02 0.015
0 0.75 0.05 0.014
0 0.75 0.1 0.016
0 0.75 0.2 0.019
0 1 0.02 0.013
0 1 0.05 0.014
0 1 0.1 0.017
0 1 0.2 0.019
0 1.25 0.02 0.015
0 1.25 0.05 0.014
0 1.25 0.1 0.017
0 1.25 0.2 0.019
0 1.5 0.02 0.014
0 1.5 0.05 0.014
0 1.5 0.1 0.017
0 1.5 0.2 0.020
0 1.75 0.02 0.027
0 1.75 0.05 0.014
0 1.75 0.1 0.017
0 1.75 0.2 0.020
0 2 0.02 0.017
0 2 0.05 0.014
0 2 0.1 0.017
0 2 0.2 0.020
0 5 0.02 0.041
0 5 0.05 0.014
0 5 0.1 0.017
0 5 0.2 0.020
0 10 0.02 0.399
0 10 0.05 0.225
0 10 0.1 0.017
0 10 0.2 0.033
Best 0 0.5 0.05 0.020
1 0.05 0.02 0.017
1 0.05 0.05 0.016
1 0.05 0.1 0.019
1 0.05 0.2 0.022
1 0.1 0.02 0.016
1 0.1 0.05 0.016
1 0.1 0.1 0.018
1 0.1 0.2 0.023
1 0.2 0.02 0.015
1 0.2 0.05 0.016
1 0.2 0.1 0.018
1 0.2 0.2 0.021
1 0.25 0.02 0.014
1 0.25 0.05 0.016
1 0.25 0.1 0.017
1 0.25 0.2 0.020
1 0.5 0.02 0.013
1 0.5 0.05 0.015
1 0.5 0.1 0.017
1 0.5 0.2 0.020
1 0.75 0.02 0.012
1 0.75 0.05 0.016
1 0.75 0.1 0.017
1 0.75 0.2 0.020
1 1 0.02 0.010
1 1 0.05 0.016
1 1 0.1 0.018
1 1 0.2 0.020
1 1.25 0.02 0.012
1 1.25 0.05 0.015
1 1.25 0.1 0.018
1 1.25 0.2 0.020
1 1.5 0.02 0.011
1 1.5 0.05 0.015
1 1.5 0.1 0.018
1 1.5 0.2 0.020
1 1.75 0.02 0.011
1 1.75 0.05 0.016
1 1.75 0.1 0.018
1 1.75 0.2 0.020
1 2 0.02 0.021
1 2 0.05 0.016
1 2 0.1 0.018
1 2 0.2 0.020
1 5 0.02 4.986
1 5 0.05 0.265
1 5 0.1 0.017
1 5 0.2 0.020
1 10 0.02 80.874
1 10 0.05 1.030
1 10 0.1 0.020
1 10 0.2 0.020
Best 1 1 0.05 0.017
2 0.05 0.02 0.017
2 0.05 0.05 0.018
2 0.05 0.1 0.021
2 0.05 0.2 0.023
2 0.1 0.02 0.017
2 0.1 0.05 0.018
2 0.1 0.1 0.020
2 0.1 0.2 0.024
2 0.2 0.02 0.017
2 0.2 0.05 0.018
2 0.2 0.1 0.020
2 0.2 0.2 0.023
2 0.25 0.02 0.017
2 0.25 0.05 0.018
2 0.25 0.1 0.019
2 0.25 0.2 0.022
2 0.5 0.02 0.015
2 0.5 0.05 0.017
2 0.5 0.1 0.019
2 0.5 0.2 0.021
2 0.75 0.02 0.016
2 0.75 0.05 0.017
2 0.75 0.1 0.019
2 0.75 0.2 0.020
2 1 0.02 0.014
2 1 0.05 0.017
2 1 0.1 0.019
2 1 0.2 0.020
2 1.25 0.02 0.012
2 1.25 0.05 0.016
2 1.25 0.1 0.019
2 1.25 0.2 0.020
2 1.5 0.02 0.012
2 1.5 0.05 0.016
2 1.5 0.1 0.017
2 1.5 0.2 0.020
2 1.75 0.02 0.012
2 1.75 0.05 0.016
2 1.75 0.1 0.017
2 0 0.05 0.02 0.014
0 0.05 0.05 0.016
0 0.05 0.1 0.019
0 0.05 0.2 0.022
0 0.1 0.02 0.014
0 0.1 0.05 0.016
0 0.1 0.1 0.018
0 0.1 0.2 0.022
0 0.2 0.02 0.014
0 0.2 0.05 0.015
0 0.2 0.1 0.017
0 0.2 0.2 0.021
0 0.25 0.02 0.014
0 0.25 0.05 0.015
0 0.25 0.1 0.016
0 0.25 0.2 0.021
0 0.5 0.02 0.013
0 0.5 0.05 0.014
0 0.5 0.1 0.016
0 0.5 0.2 0.019
0 0.75 0.02 0.015
0 0.75 0.05 0.014
0 0.75 0.1 0.016
0 0.75 0.2 0.019
0 1 0.02 0.013
0 1 0.05 0.014
0 1 0.1 0.017
0 1 0.2 0.019
0 1.25 0.02 0.015
0 1.25 0.05 0.014
0 1.25 0.1 0.017
0 1.25 0.2 0.019
0 1.5 0.02 0.014
0 1.5 0.05 0.014
0 1.5 0.1 0.017
0 1.5 0.2 0.020
0 1.75 0.02 0.027
0 1.75 0.05 0.014
0 1.75 0.1 0.017
0 1.75 0.2 0.020
0 2 0.02 0.017
0 2 0.05 0.014
0 2 0.1 0.017
0 2 0.2 0.020
0 5 0.02 0.041
0 5 0.05 0.014
0 5 0.1 0.017
0 5 0.2 0.020
0 10 0.02 0.399
0 10 0.05 0.225
0 10 0.1 0.017
0 10 0.2 0.033
Best 0 0.5 0.05 0.020
1 0.05 0.02 0.017
1 0.05 0.05 0.016
1 0.05 0.1 0.019
1 0.05 0.2 0.022
1 0.1 0.02 0.016
1 0.1 0.05 0.016
1 0.1 0.1 0.018
1 0.1 0.2 0.023
1 0.2 0.02 0.015
1 0.2 0.05 0.016
1 0.2 0.1 0.018
1 0.2 0.2 0.021
1 0.25 0.02 0.014
1 0.25 0.05 0.016
1 0.25 0.1 0.017
1 0.25 0.2 0.020
1 0.5 0.02 0.013
1 0.5 0.05 0.015
1 0.5 0.1 0.017
1 0.5 0.2 0.020
1 0.75 0.02 0.012
1 0.75 0.05 0.016
1 0.75 0.1 0.017
1 0.75 0.2 0.020
1 1 0.02 0.010
1 1 0.05 0.016
1 1 0.1 0.018
1 1 0.2 0.020
1 1.25 0.02 0.012
1 1.25 0.05 0.015
1 1.25 0.1 0.018
1 1.25 0.2 0.020
1 1.5 0.02 0.011
1 1.5 0.05 0.015
1 1.5 0.1 0.018
1 1.5 0.2 0.020
1 1.75 0.02 0.011
1 1.75 0.05 0.016
1 1.75 0.1 0.018
1 1.75 0.2 0.020
1 2 0.02 0.021
1 2 0.05 0.016
1 2 0.1 0.018
1 2 0.2 0.020
1 5 0.02 4.986
1 5 0.05 0.265
1 5 0.1 0.017
1 5 0.2 0.020
1 10 0.02 80.874
1 10 0.05 1.030
1 10 0.1 0.020
1 10 0.2 0.020
Best 1 1 0.05 0.017
2 0.05 0.02 0.017
2 0.05 0.05 0.018
2 0.05 0.1 0.021
2 0.05 0.2 0.023
2 0.1 0.02 0.017
2 0.1 0.05 0.018
2 0.1 0.1 0.020
2 0.1 0.2 0.024
2 0.2 0.02 0.017
2 0.2 0.05 0.018
2 0.2 0.1 0.020
2 0.2 0.2 0.023
2 0.25 0.02 0.017
2 0.25 0.05 0.018
2 0.25 0.1 0.019
2 0.25 0.2 0.022
2 0.5 0.02 0.015
2 0.5 0.05 0.017
2 0.5 0.1 0.019
2 0.5 0.2 0.021
2 0.75 0.02 0.016
2 0.75 0.05 0.017
2 0.75 0.1 0.019
2 0.75 0.2 0.020
2 1 0.02 0.014
2 1 0.05 0.017
2 1 0.1 0.019
2 1 0.2 0.020
2 1.25 0.02 0.012
2 1.25 0.05 0.016
2 1.25 0.1 0.019
2 1.25 0.2 0.020
2 1.5 0.02 0.012
2 1.5 0.05 0.016
2 1.5 0.1 0.017
2 1.5 0.2 0.020
2 1.75 0.02 0.012
2 1.75 0.05 0.016
2 1.75 0.1 0.017
2 1.75 0.2 0.021
2 2 0.02 0.012
2 2 0.05 0.016
2 2 0.1 0.016
2 2 0.2 0.021
2 5 0.02 0.012
2 5 0.05 0.013
2 5 0.1 0.019
2 5 0.2 0.022
2 10 0.02 0.012
2 10 0.05 0.014
2 10 0.1 0.018
2 10 0.2 0.022
Best 2 1.75 0.05 0.021
3 0.05 0.02 0.012
3 0.05 0.05 0.013
3 0.05 0.1 0.015
3 0.05 0.2 0.018
3 0.1 0.02 0.011
3 0.1 0.05 0.013
3 0.1 0.1 0.014
3 0.1 0.2 0.018
3 0.2 0.02 0.011
3 0.2 0.05 0.012
3 0.2 0.1 0.014
3 0.2 0.2 0.017
3 0.25 0.02 0.011
3 0.25 0.05 0.012
3 0.25 0.1 0.014
3 0.25 0.2 0.017
3 0.5 0.02 0.011
3 0.5 0.05 0.012
3 0.5 0.1 0.014
3 0.5 0.2 0.016
3 0.75 0.02 0.010
3 0.75 0.05 0.012
3 0.75 0.1 0.014
3 0.75 0.2 0.016
3 1 0.02 0.010
3 1 0.05 0.013
3 1 0.1 0.014
3 1 0.2 0.017
3 1.25 0.02 0.010
3 1.25 0.05 0.013
3 1.25 0.1 0.014
3 1.25 0.2 0.017
3 1.5 0.02 0.010
3 1.5 0.05 0.013
3 1.5 0.1 0.014
3 1.5 0.2 0.017
3 1.75 0.02 0.010
3 1.75 0.05 0.013
3 1.75 0.1 0.015
3 1.75 0.2 0.017
3 2 0.02 0.010
3 2 0.05 0.013
3 2 0.1 0.015
3 2 0.2 0.017
3 5 0.02 0.010
3 5 0.05 0.011
3 5 0.1 0.015
3 5 0.2 0.017
3 10 0.02 0.010
3 10 0.05 0.011
3 10 0.1 0.014
3 10 0.2 0.017
Best 3 1 0.05 0.023
4 0.05 0.02 0.018
4 0.05 0.05 0.018
4 0.05 0.1 0.020
4 0.05 0.2 0.022
4 0.1 0.02 0.018
4 0.1 0.05 0.018
4 0.1 0.1 0.019
4 0.1 0.2 0.022
4 0.2 0.02 0.016
4 0.2 0.05 0.017
4 0.2 0.1 0.019
4 0.2 0.2 0.021
4 0.25 0.02 0.016
4 0.25 0.05 0.017
4 0.25 0.1 0.018
4 0.25 0.2 0.021
4 0.5 0.02 0.014
4 0.5 0.05 0.017
4 0.5 0.1 0.018
4 0.5 0.2 0.020
4 0.75 0.02 0.014
4 0.75 0.05 0.017
4 0.75 0.1 0.019
4 0.75 0.2 0.021
4 1 0.02 0.013
4 1 0.05 0.018
4 1 0.1 0.019
4 1 0.2 0.021
4 1.25 0.02 0.014
4 1.25 0.05 0.018
4 1.25 0.1 0.019
4 1.25 0.2 0.021
4 1.5 0.02 0.013
4 1.5 0.05 0.018
4 1.5 0.1 0.020
4 1.5 0.2 0.021
4 1.75 0.02 0.013
4 1.75 0.05 0.018
4 1.75 0.1 0.020
4 1.75 0.2 0.021
4 2 0.02 0.013
4 2 0.05 0.017
4 2 0.1 0.020
4 2 0.2 0.021
4 5 0.02 0.013
4 5 0.05 0.015
4 5 0.1 0.019
4 5 0.2 0.021
4 10 0.02 0.013
4 10 0.05 0.014
4 10 0.1 0.020
4 10 0.2 0.021
Best 4 1.5 0.05 0.019
0 0.05 0.02 0.018
0 0.05 0.05 0.020
0 0.05 0.1 0.022
0 0.05 0.2 0.027
0 0.1 0.02 0.018
0 0.1 0.05 0.020
0 0.1 0.1 0.022
0 0.1 0.2 0.027
0 0.2 0.02 0.020
0 0.2 0.05 0.019
0 0.2 0.1 0.023
0 0.2 0.2 0.027
0 0.25 0.02 0.020
0 0.25 0.05 0.019
0 0.25 0.1 0.023
0 0.25 0.2 0.027
0 0.5 0.02 0.018
0 0.5 0.05 0.018
0 0.5 0.1 0.022
0 0.5 0.2 0.027
0 0.75 0.02 0.018
0 0.75 0.05 0.021
0 0.75 0.1 0.022
0 0.75 0.2 0.028
0 1 0.02 0.018
0 1 0.05 0.022
0 1 0.1 0.022
0 1 0.2 0.029
0 1.25 0.02 0.017
0 1.25 0.05 0.020
0 1.25 0.1 0.022
0 1.25 0.2 0.030
0 1.5 0.02 0.017
0 1.5 0.05 0.019
0 1.5 0.1 0.022
0 1.5 0.2 0.030
0 1.75 0.02 0.019
0 1.75 0.05 0.019
0 1.75 0.1 0.021
0 1.75 0.2 0.028
0 2 0.02 0.018
0 2 0.05 0.019
0 2 0.1 0.020
0 2 0.2 0.027
0 5 0.02 0.018
0 5 0.05 0.019
0 5 0.1 0.021
0 5 0.2 0.028
0 10 0.02 0.018
0 10 0.05 0.019
0 10 0.1 0.021
0 10 0.2 0.028
Best 0 1.25 0.05 0.017
1 0.05 0.02 0.015
1 0.05 0.05 0.014
1 0.05 0.1 0.017
1 0.05 0.2 0.024
1 0.1 0.02 0.015
1 0.1 0.05 0.015
1 0.1 0.1 0.017
1 0.1 0.2 0.023
1 0.2 0.02 0.015
1 0.2 0.05 0.014
1 0.2 0.1 0.017
1 0.2 0.2 0.022
1 0.25 0.02 0.015
1 0.25 0.05 0.015
1 0.25 0.1 0.017
1 0.25 0.2 0.022
1 0.5 0.02 0.014
1 0.5 0.05 0.017
1 0.5 0.1 0.020
1 0.5 0.2 0.021
1 0.75 0.02 0.014
1 0.75 0.05 0.018
1 0.75 0.1 0.021
1 0.75 0.2 0.022
1 1 0.02 0.014
1 1 0.05 0.016
1 1 0.1 0.021
1 1 0.2 0.022
1 1.25 0.02 0.015
1 1.25 0.05 0.016
1 1.25 0.1 0.022
1 1.25 0.2 0.023
1 1.5 0.02 0.015
1 1.5 0.05 0.016
1 1.5 0.1 0.022
1 1.5 0.2 0.023
1 1.75 0.02 0.014
1 1.75 0.05 0.016
1 1.75 0.1 0.023
1 1.75 0.2 0.024
1 2 0.02 0.015
1 2 0.05 0.017
1 2 0.1 0.023
1 2 0.2 0.024
1 5 0.02 0.016
1 5 0.05 0.017
1 5 0.1 0.022
1 5 0.2 0.025
1 10 0.02 0.016
1 10 0.05 0.016
1 10 0.1 0.021
1 10 0.2 0.025
Best 1 0.75 0.05 0.019
2 0.05 0.02 0.019
2 0.05 0.05 0.021
2 0.05 0.1 0.022
2 0.05 0.2 0.029
2 0.1 0.02 0.019
2 0.1 0.05 0.018
2 0.1 0.1 0.021
2 0.1 0.2 0.029
2 0.2 0.02 0.017
2 0.2 0.05 0.018
2 0.2 0.1 0.021
2 0.2 0.2 0.026
2 0.25 0.02 0.016
2 0.25 0.05 0.018
2 0.25 0.1 0.021
2 0.25 0.2 0.025
2 0.5 0.02 0.016
2 0.5 0.05 0.019
2 0.5 0.1 0.021
2 0.5 0.2 0.025
2 0.75 0.02 0.016
2 0.75 0.05 0.020
2 0.75 0.1 0.022
2 0.75 0.2 0.025
2 1 0.02 0.016
2 1 0.05 0.018
2 1 0.1 0.024
2 1 0.2 0.026
2 1.25 0.02 0.017
2 1.25 0.05 0.020
2 1.25 0.1 0.023
2 1.25 0.2 0.024
2 1.5 0.02 0.017
2 1.5 0.05 0.020
2 1.5 0.1 0.023
2 1.5 0.2 0.024
2 1.75 0.02 0.016
2 1.75 0.05 0.020
2 1.75 0.1 0.023
2 1.75 0.2 0.024
2 2 0.02 0.017
2 2 0.05 0.021
2 2 0.1 0.023
2 2 0.2 0.024
2 5 0.02 0.017
2 5 0.05 0.019
2 5 0.1 0.020
2 5 0.2 0.026
2 10 0.02 0.018
2 10 0.05 0.019
2 10 0.1 0.021
2 10 0.2 0.026
Best 2 0.75 0.05 0.017
3 0.05 0.02 0.014
3 0.05 0.05 0.014
3 0.05 0.1 0.019
3 0.05 0.2 0.025
3 0.1 0.02 0.014
3 0.1 0.05 0.014
3 0.1 0.1 0.018
3 0.1 0.2 0.024
3 0.2 0.02 0.013
3 0.2 0.05 0.014
3 0.2 0.1 0.017
3 0.2 0.2 0.022
3 0.25 0.02 0.013
3 0.25 0.05 0.014
3 0.25 0.1 0.016
3 0.25 0.2 0.021
3 0.5 0.02 0.014
3 0.5 0.05 0.014
3 0.5 0.1 0.017
3 0.5 0.2 0.020
3 0.75 0.02 0.013
3 0.75 0.05 0.017
3 0.75 0.1 0.017
3 0.75 0.2 0.020
3 1 0.02 0.014
3 1 0.05 0.016
3 1 0.1 0.018
3 1 0.2 0.020
3 1.25 0.02 0.014
3 1.25 0.05 0.016
3 1.25 0.1 0.016
3 1.25 0.2 0.020
3 1.5 0.02 0.014
3 1.5 0.05 0.016
3 1.5 0.1 0.016
3 1.5 0.2 0.021
3 1.75 0.02 0.015
3 1.75 0.05 0.016
3 1.75 0.1 0.016
3 1.75 0.2 0.021
3 2 0.02 0.015
3 2 0.05 0.017
3 2 0.1 0.017
3 2 0.2 0.021
3 5 0.02 0.015
3 5 0.05 0.016
3 5 0.1 0.017
3 5 0.2 0.021
3 10 0.02 0.015
3 10 0.05 0.017
3 10 0.1 0.017
3 10 0.2 0.021
Best 3 0.75 0.05 0.020
4 0.05 0.02 0.020
4 0.05 0.05 0.024
4 0.05 0.1 0.024
4 0.05 0.2 0.029
4 0.1 0.02 0.019
4 0.1 0.05 0.023
4 0.1 0.1 0.024
4 0.1 0.2 0.029
4 0.2 0.02 0.021
4 0.2 0.05 0.021
4 0.2 0.1 0.023
4 0.2 0.2 0.025
4 0.25 0.02 0.021
4 0.25 0.05 0.021
4 0.25 0.1 0.022
4 0.25 0.2 0.025
4 0.5 0.02 0.021
4 0.5 0.05 0.022
4 0.5 0.1 0.023
4 0.5 0.2 0.029
4 1.75 0.2 0.021
2 2 0.02 0.012
2 2 0.05 0.016
2 2 0.1 0.016
2 2 0.2 0.021
2 5 0.02 0.012
2 5 0.05 0.013
2 5 0.1 0.019
2 5 0.2 0.022
2 10 0.02 0.012
2 10 0.05 0.014
2 10 0.1 0.018
2 10 0.2 0.022
Best 2 1.75 0.05 0.021
3 0.05 0.02 0.012
3 0.05 0.05 0.013
3 0.05 0.1 0.015
3 0.05 0.2 0.018
3 0.1 0.02 0.011
3 0.1 0.05 0.013
3 0.1 0.1 0.014
3 0.1 0.2 0.018
3 0.2 0.02 0.011
3 0.2 0.05 0.012
3 0.2 0.1 0.014
3 0.2 0.2 0.017
3 0.25 0.02 0.011
3 0.25 0.05 0.012
3 0.25 0.1 0.014
3 0.25 0.2 0.017
3 0.5 0.02 0.011
3 0.5 0.05 0.012
3 0.5 0.1 0.014
3 0.5 0.2 0.016
3 0.75 0.02 0.010
3 0.75 0.05 0.012
3 0.75 0.1 0.014
3 0.75 0.2 0.016
3 1 0.02 0.010
3 1 0.05 0.013
3 1 0.1 0.014
3 1 0.2 0.017
3 1.25 0.02 0.010
3 1.25 0.05 0.013
3 1.25 0.1 0.014
3 1.25 0.2 0.017
3 1.5 0.02 0.010
3 1.5 0.05 0.013
3 1.5 0.1 0.014
3 1.5 0.2 0.017
3 1.75 0.02 0.010
3 1.75 0.05 0.013
3 1.75 0.1 0.015
3 1.75 0.2 0.017
3 2 0.02 0.010
3 2 0.05 0.013
3 2 0.1 0.015
3 2 0.2 0.017
3 5 0.02 0.010
3 5 0.05 0.011
3 5 0.1 0.015
3 5 0.2 0.017
3 10 0.02 0.010
3 10 0.05 0.011
3 10 0.1 0.014
3 10 0.2 0.017
Best 3 1 0.05 0.023
4 0.05 0.02 0.018
4 0.05 0.05 0.018
4 0.05 0.1 0.020
4 0.05 0.2 0.022
4 0.1 0.02 0.018
4 0.1 0.05 0.018
4 0.1 0.1 0.019
4 0.1 0.2 0.022
4 0.2 0.02 0.016
4 0.2 0.05 0.017
4 0.2 0.1 0.019
4 0.2 0.2 0.021
4 0.25 0.02 0.016
4 0.25 0.05 0.017
4 0.25 0.1 0.018
4 0.25 0.2 0.021
4 0.5 0.02 0.014
4 0.5 0.05 0.017
4 0.5 0.1 0.018
4 0.5 0.2 0.020
4 0.75 0.02 0.014
4 0.75 0.05 0.017
4 0.75 0.1 0.019
4 0.75 0.2 0.021
4 1 0.02 0.013
4 1 0.05 0.018
4 1 0.1 0.019
4 1 0.2 0.021
4 1.25 0.02 0.014
4 1.25 0.05 0.018
4 1.25 0.1 0.019
4 1.25 0.2 0.021
4 1.5 0.02 0.013
4 1.5 0.05 0.018
4 1.5 0.1 0.020
4 1.5 0.2 0.021
4 1.75 0.02 0.013
4 1.75 0.05 0.018
4 1.75 0.1 0.020
4 1.75 0.2 0.021
4 2 0.02 0.013
4 2 0.05 0.017
4 2 0.1 0.020
4 2 0.2 0.021
4 5 0.02 0.013
4 5 0.05 0.015
4 5 0.1 0.019
4 5 0.2 0.021
4 10 0.02 0.013
4 10 0.05 0.014
4 10 0.1 0.020
4 10 0.2 0.021
Best 4 1.5 0.05 0.019
0 0.05 0.02 0.018
0 0.05 0.05 0.020
0 0.05 0.1 0.022
0 0.05 0.2 0.027
0 0.1 0.02 0.018
0 0.1 0.05 0.020
0 0.1 0.1 0.022
0 0.1 0.2 0.027
0 0.2 0.02 0.020
0 0.2 0.05 0.019
0 0.2 0.1 0.023
0 0.2 0.2 0.027
0 0.25 0.02 0.020
0 0.25 0.05 0.019
0 0.25 0.1 0.023
0 0.25 0.2 0.027
0 0.5 0.02 0.018
0 0.5 0.05 0.018
0 0.5 0.1 0.022
0 0.5 0.2 0.027
0 0.75 0.02 0.018
0 0.75 0.05 0.021
0 0.75 0.1 0.022
0 0.75 0.2 0.028
0 1 0.02 0.018
0 1 0.05 0.022
0 1 0.1 0.022
0 1 0.2 0.029
0 1.25 0.02 0.017
0 1.25 0.05 0.020
0 1.25 0.1 0.022
0 1.25 0.2 0.030
0 1.5 0.02 0.017
0 1.5 0.05 0.019
0 1.5 0.1 0.022
0 1.5 0.2 0.030
0 1.75 0.02 0.019
0 1.75 0.05 0.019
0 1.75 0.1 0.021
0 1.75 0.2 0.028
0 2 0.02 0.018
0 2 0.05 0.019
0 2 0.1 0.020
0 2 0.2 0.027
0 5 0.02 0.018
0 5 0.05 0.019
0 5 0.1 0.021
0 5 0.2 0.028
0 10 0.02 0.018
0 10 0.05 0.019
0 10 0.1 0.021
0 10 0.2 0.028
Best 0 1.25 0.05 0.017
1 0.05 0.02 0.015
1 0.05 0.05 0.014
1 0.05 0.1 0.017
1 0.05 0.2 0.024
1 0.1 0.02 0.015
1 0.1 0.05 0.015
1 0.1 0.1 0.017
1 0.1 0.2 0.023
1 0.2 0.02 0.015
1 0.2 0.05 0.014
1 0.2 0.1 0.017
1 0.2 0.2 0.022
1 0.25 0.02 0.015
1 0.25 0.05 0.015
1 0.25 0.1 0.017
1 0.25 0.2 0.022
1 0.5 0.02 0.014
1 0.5 0.05 0.017
1 0.5 0.1 0.020
1 0.5 0.2 0.021
1 0.75 0.02 0.014
1 0.75 0.05 0.018
1 0.75 0.1 0.021
1 0.75 0.2 0.022
1 1 0.02 0.014
1 1 0.05 0.016
1 1 0.1 0.021
1 1 0.2 0.022
1 1.25 0.02 0.015
1 1.25 0.05 0.016
1 1.25 0.1 0.022
1 1.25 0.2 0.023
1 1.5 0.02 0.015
1 1.5 0.05 0.016
1 1.5 0.1 0.022
1 1.5 0.2 0.023
1 1.75 0.02 0.014
1 1.75 0.05 0.016
1 1.75 0.1 0.023
1 1.75 0.2 0.024
1 2 0.02 0.015
1 2 0.05 0.017
1 2 0.1 0.023
1 2 0.2 0.024
1 5 0.02 0.016
1 5 0.05 0.017
1 5 0.1 0.022
1 5 0.2 0.025
1 10 0.02 0.016
1 10 0.05 0.016
1 10 0.1 0.021
1 10 0.2 0.025
Best 1 0.75 0.05 0.019
2 0.05 0.02 0.019
2 0.05 0.05 0.021
2 0.05 0.1 0.022
2 0.05 0.2 0.029
2 0.1 0.02 0.019
2 0.1 0.05 0.018
2 0.1 0.1 0.021
2 0.1 0.2 0.029
2 0.2 0.02 0.017
2 0.2 0.05 0.018
2 0.2 0.1 0.021
2 0.2 0.2 0.026
2 0.25 0.02 0.016
2 0.25 0.05 0.018
2 0.25 0.1 0.021
2 0.25 0.2 0.025
2 0.5 0.02 0.016
2 0.5 0.05 0.019
2 0.5 0.1 0.021
2 0.5 0.2 0.025
2 0.75 0.02 0.016
2 0.75 0.05 0.020
2 0.75 0.1 0.022
2 0.75 0.2 0.025
2 1 0.02 0.016
2 1 0.05 0.018
2 1 0.1 0.024
2 1 0.2 0.026
2 1.25 0.02 0.017
2 1.25 0.05 0.020
2 1.25 0.1 0.023
2 1.25 0.2 0.024
2 1.5 0.02 0.017
2 1.5 0.05 0.020
2 1.5 0.1 0.023
2 1.5 0.2 0.024
2 1.75 0.02 0.016
2 1.75 0.05 0.020
2 1.75 0.1 0.023
2 1.75 0.2 0.024
2 2 0.02 0.017
2 2 0.05 0.021
2 2 0.1 0.023
2 2 0.2 0.024
2 5 0.02 0.017
2 5 0.05 0.019
2 5 0.1 0.020
2 5 0.2 0.026
2 10 0.02 0.018
2 10 0.05 0.019
2 10 0.1 0.021
2 10 0.2 0.026
Best 2 0.75 0.05 0.017
3 0.05 0.02 0.014
3 0.05 0.05 0.014
3 0.05 0.1 0.019
3 0.05 0.2 0.025
3 0.1 0.02 0.014
3 0.1 0.05 0.014
3 0.1 0.1 0.018
3 0.1 0.2 0.024
3 0.2 0.02 0.013
3 0.2 0.05 0.014
3 0.2 0.1 0.017
3 0.2 0.2 0.022
3 0.25 0.02 0.013
3 0.25 0.05 0.014
3 0.25 0.1 0.016
3 0.25 0.2 0.021
3 0.5 0.02 0.014
3 0.5 0.05 0.014
3 0.5 0.1 0.017
3 0.5 0.2 0.020
3 0.75 0.02 0.013
3 0.75 0.05 0.017
3 0.75 0.1 0.017
3 0.75 0.2 0.020
3 1 0.02 0.014
3 1 0.05 0.016
3 1 0.1 0.018
3 1 0.2 0.020
3 1.25 0.02 0.014
3 1.25 0.05 0.016
3 1.25 0.1 0.016
3 1.25 0.2 0.020
3 1.5 0.02 0.014
3 1.5 0.05 0.016
3 1.5 0.1 0.016
3 1.5 0.2 0.021
3 1.75 0.02 0.015
3 1.75 0.05 0.016
3 1.75 0.1 0.016
3 1.75 0.2 0.021
3 2 0.02 0.015
3 2 0.05 0.017
3 2 0.1 0.017
3 2 0.2 0.021
3 5 0.02 0.015
3 5 0.05 0.016
3 5 0.1 0.017
3 5 0.2 0.021
3 10 0.02 0.015
3 10 0.05 0.017
3 10 0.1 0.017
3 10 0.2 0.021
Best 3 0.75 0.05 0.020
4 0.05 0.02 0.020
4 0.05 0.05 0.024
4 0.05 0.1 0.024
4 0.05 0.2 0.029
4 0.1 0.02 0.019
4 0.1 0.05 0.023
4 0.1 0.1 0.024
4 0.1 0.2 0.029
4 0.2 0.02 0.021
4 0.2 0.05 0.021
4 0.2 0.1 0.023
4 0.2 0.2 0.025
4 0.25 0.02 0.021
4 0.25 0.05 0.021
4 0.25 0.1 0.022
4 0.25 0.2 0.025
4 0.5 0.02 0.021
4 0.5 0.05 0.022
4 0.5 0.1 0.023
4 0.5 0.2 0.029
4 0.75 0.02 0.018
4 0.75 0.05 0.019
4 0.75 0.1 0.021
4 0.75 0.2 0.029
4 1 0.02 0.018
4 1 0.05 0.019
4 1 0.1 0.020
4 1 0.2 0.029
4 1.25 0.02 0.017
4 1.25 0.05 0.018
4 1.25 0.1 0.020
4 1.25 0.2 0.028
4 1.5 0.02 0.017
4 1.5 0.05 0.019
4 1.5 0.1 0.020
4 1.5 0.2 0.027
4 1.75 0.02 0.022
4 1.75 0.05 0.023
4 1.75 0.1 0.024
4 1.75 0.2 0.026
4 2 0.02 0.038
4 2 0.05 0.022
4 2 0.1 0.024
4 2 0.2 0.026
4 5 0.02 0.718
4 5 0.05 0.019
4 5 0.1 0.029
4 5 0.2 0.024
4 10 0.02 21.317
4 10 0.05 2.853
4 10 0.1 0.027
4 10 0.2 0.023
Best 4 1.25 0.05 0.018
0 0.05 0.02 13.851
0 0.05 0.05 37.379
0 0.05 0.1 50.964
0 0.05 0.2 59.477
0 0.1 0.02 13.109
0 0.1 0.05 24.345
0 0.1 0.1 32.185
0 0.1 0.2 37.173
0 0.2 0.02 13.207
0 0.2 0.05 17.607
0 0.2 0.1 24.685
0 0.2 0.2 28.833
0 0.25 0.02 13.171
0 0.25 0.05 16.532
0 0.25 0.1 23.504
0 0.25 0.2 27.397
0 0.5 0.02 10.708
0 0.5 0.05 16.953
0 0.5 0.1 23.646
0 0.5 0.2 27.454
0 0.75 0.02 11.574
0 0.75 0.05 23.672
0 0.75 0.1 29.447
0 0.75 0.2 33.300
0 1 0.02 11.768
0 1 0.05 30.726
0 1 0.1 35.701
0 1 0.2 39.568
0 1.25 0.02 11.556
0 1.25 0.05 37.192
0 1.25 0.1 41.668
0 1.25 0.2 45.597
0 1.5 0.02 11.541
0 1.5 0.05 42.863
0 1.5 0.1 47.217
0 1.5 0.2 51.192
0 1.75 0.02 24.866
0 1.75 0.05 47.771
0 1.75 0.1 52.360
0 1.75 0.2 56.369
0 2 0.02 31.880
0 2 0.05 52.011
0 2 0.1 57.676
0 2 0.2 61.191
0 5 0.02 12.263
0 5 0.05 16.718
0 5 0.1 94.381
0 5 0.2 100.270
0 10 0.02 12.275
0 10 0.05 77.794
0 10 0.1 127.953
0 10 0.2 139.407
Best 0 0.5 0.05 16.769
1 0.05 0.02 16.464
1 0.05 0.05 37.647
1 0.05 0.1 49.272
1 0.05 0.2 58.716
1 0.1 0.02 15.154
1 0.1 0.05 24.359
1 0.1 0.1 31.194
1 0.1 0.2 36.267
1 0.2 0.02 14.028
1 0.2 0.05 18.474
1 0.2 0.1 24.351
1 0.2 0.2 28.327
1 0.25 0.02 14.167
1 0.25 0.05 17.770
1 0.25 0.1 23.393
1 0.25 0.2 27.107
1 0.5 0.02 12.742
1 0.5 0.05 17.319
1 0.5 0.1 22.726
1 0.5 0.2 26.240
1 0.75 0.02 13.093
1 0.75 0.05 21.416
1 0.75 0.1 26.489
1 0.75 0.2 29.709
1 1 0.02 16.419
1 1 0.05 25.137
1 1 0.1 31.849
1 1 0.2 34.923
1 1.25 0.02 20.223
1 1.25 0.05 29.308
1 1.25 0.1 37.427
1 1.25 0.2 40.430
1 1.5 0.02 20.031
1 1.5 0.05 32.730
1 1.5 0.1 42.720
1 1.5 0.2 45.685
1 1.75 0.02 20.064
1 1.75 0.05 35.698
1 1.75 0.1 47.592
1 1.75 0.2 50.526
1 2 0.02 21.306
1 2 0.05 47.885
1 2 0.1 52.103
1 2 0.2 55.018
1 5 0.02 45.086
1 5 0.05 77.379
1 5 0.1 91.967
1 5 0.2 96.452
1 10 0.02 7584.628
1 10 0.05 846.400
1 10 0.1 143.022
1 10 0.2 148.121
Best 1 0.5 0.05 18.598
2 0.05 0.75 0.02 0.018
4 0.75 0.05 0.019
4 0.75 0.1 0.021
4 0.75 0.2 0.029
4 1 0.02 0.018
4 1 0.05 0.019
4 1 0.1 0.020
4 1 0.2 0.029
4 1.25 0.02 0.017
4 1.25 0.05 0.018
4 1.25 0.1 0.020
4 1.25 0.2 0.028
4 1.5 0.02 0.017
4 1.5 0.05 0.019
4 1.5 0.1 0.020
4 1.5 0.2 0.027
4 1.75 0.02 0.022
4 1.75 0.05 0.023
4 1.75 0.1 0.024
4 1.75 0.2 0.026
4 2 0.02 0.038
4 2 0.05 0.022
4 2 0.1 0.024
4 2 0.2 0.026
4 5 0.02 0.718
4 5 0.05 0.019
4 5 0.1 0.029
4 5 0.2 0.024
4 10 0.02 21.317
4 10 0.05 2.853
4 10 0.1 0.027
4 10 0.2 0.023
Best 4 1.25 0.05 0.018
0 0.05 0.02 13.851
0 0.05 0.05 37.379
0 0.05 0.1 50.964
0 0.05 0.2 59.477
0 0.1 0.02 13.109
0 0.1 0.05 24.345
0 0.1 0.1 32.185
0 0.1 0.2 37.173
0 0.2 0.02 13.207
0 0.2 0.05 17.607
0 0.2 0.1 24.685
0 0.2 0.2 28.833
0 0.25 0.02 13.171
0 0.25 0.05 16.532
0 0.25 0.1 23.504
0 0.25 0.2 27.397
0 0.5 0.02 10.708
0 0.5 0.05 16.953
0 0.5 0.1 23.646
0 0.5 0.2 27.454
0 0.75 0.02 11.574
0 0.75 0.05 23.672
0 0.75 0.1 29.447
0 0.75 0.2 33.300
0 1 0.02 11.768
0 1 0.05 30.726
0 1 0.1 35.701
0 1 0.2 39.568
0 1.25 0.02 11.556
0 1.25 0.05 37.192
0 1.25 0.1 41.668
0 1.25 0.2 45.597
0 1.5 0.02 11.541
0 1.5 0.05 42.863
0 1.5 0.1 47.217
0 1.5 0.2 51.192
0 1.75 0.02 24.866
0 1.75 0.05 47.771
0 1.75 0.1 52.360
0 1.75 0.2 56.369
0 2 0.02 31.880
0 2 0.05 52.011
0 2 0.1 57.676
0 2 0.2 61.191
0 5 0.02 12.263
0 5 0.05 16.718
0 5 0.1 94.381
0 5 0.2 100.270
0 10 0.02 12.275
0 10 0.05 77.794
0 10 0.1 127.953
0 10 0.2 139.407
Best 0 0.5 0.05 16.769
1 0.05 0.02 16.464
1 0.05 0.05 37.647
1 0.05 0.1 49.272
1 0.05 0.2 58.716
1 0.1 0.02 15.154
1 0.1 0.05 24.359
1 0.1 0.1 31.194
1 0.1 0.2 36.267
1 0.2 0.02 14.028
1 0.2 0.05 18.474
1 0.2 0.1 24.351
1 0.2 0.2 28.327
1 0.25 0.02 14.167
1 0.25 0.05 17.770
1 0.25 0.1 23.393
1 0.25 0.2 27.107
1 0.5 0.02 12.742
1 0.5 0.05 17.319
1 0.5 0.1 22.726
1 0.5 0.2 26.240
1 0.75 0.02 13.093
1 0.75 0.05 21.416
1 0.75 0.1 26.489
1 0.75 0.2 29.709
1 1 0.02 16.419
1 1 0.05 25.137
1 1 0.1 31.849
1 1 0.2 34.923
1 1.25 0.02 20.223
1 1.25 0.05 29.308
1 1.25 0.1 37.427
1 1.25 0.2 40.430
1 1.5 0.02 20.031
1 1.5 0.05 32.730
1 1.5 0.1 42.720
1 1.5 0.2 45.685
1 1.75 0.02 20.064
1 1.75 0.05 35.698
1 1.75 0.1 47.592
1 1.75 0.2 50.526
1 2 0.02 21.306
1 2 0.05 47.885
1 2 0.1 52.103
1 2 0.2 55.018
1 5 0.02 45.086
1 5 0.05 77.379
1 5 0.1 91.967
1 5 0.2 96.452
1 10 0.02 7584.628
1 10 0.05 846.400
1 10 0.1 143.022
1 10 0.2 148.121
Best 1 0.5 0.05 18.598
2 0.05 0.02 14.519
2 0.05 0.05 63.792
2 0.05 0.1 91.418
2 0.05 0.2 109.974
2 0.1 0.02 14.082
2 0.1 0.05 39.592
2 0.1 0.1 51.005
2 0.1 0.2 58.453
2 0.2 0.02 13.718
2 0.2 0.05 23.820
2 0.2 0.1 31.456
2 0.2 0.2 35.619
2 0.25 0.02 13.764
2 0.25 0.05 21.128
2 0.25 0.1 28.298
2 0.25 0.2 31.994
2 0.5 0.02 12.509
2 0.5 0.05 16.580
2 0.5 0.1 22.497
2 0.5 0.2 25.576
2 0.75 0.02 11.942
2 0.75 0.05 15.862
2 0.75 0.1 21.373
2 0.75 0.2 24.234
2 1 0.02 12.728
2 1 0.05 17.282
2 1 0.1 22.400
2 1 0.2 26.184
2 1.25 0.02 12.941
2 1.25 0.05 21.206
2 1.25 0.1 25.119
2 1.25 0.2 29.192
2 1.5 0.02 14.684
2 1.5 0.05 25.129
2 1.5 0.1 28.699
2 1.5 0.2 33.022
2 1.75 0.02 16.436
2 1.75 0.05 29.206
2 1.75 0.1 32.563
2 1.75 0.2 37.068
2 2 0.02 16.692
2 2 0.05 33.057
2 2 0.1 36.367
2 2 0.2 40.992
2 5 0.02 32.007
2 5 0.05 57.860
2 5 0.1 67.534
2 5 0.2 73.424
2 10 0.02 44.966
2 10 0.05 79.477
2 10 0.1 101.918
2 10 0.2 107.490
Best 2 0.75 0.05 13.891
3 0.05 0.02 14.269
3 0.05 0.05 36.837
3 0.05 0.1 46.030
3 0.05 0.2 55.521
3 0.1 0.02 13.075
3 0.1 0.05 21.752
3 0.1 0.1 27.472
3 0.1 0.2 33.703
3 0.2 0.02 12.698
3 0.2 0.05 15.963
3 0.2 0.1 21.311
3 0.2 0.2 26.257
3 0.25 0.02 12.992
3 0.25 0.05 15.193
3 0.25 0.1 20.424
3 0.25 0.2 25.151
3 0.5 0.02 9.554
3 0.5 0.05 16.455
3 0.5 0.1 22.115
3 0.5 0.2 25.856
3 0.75 0.02 10.123
3 0.75 0.05 24.821
3 0.75 0.1 28.820
3 0.75 0.2 32.159
3 1 0.02 11.033
3 1 0.05 32.163
3 1 0.1 36.106
3 1 0.2 39.190
3 1.25 0.02 10.965
3 1.25 0.05 39.798
3 1.25 0.1 43.134
3 1.25 0.2 46.389
3 1.5 0.02 15.547
3 1.5 0.05 46.307
3 1.5 0.1 49.754
3 1.5 0.2 53.174
3 1.75 0.02 11.687
3 1.75 0.05 51.832
3 1.75 0.1 56.055
3 1.75 0.2 59.598
3 2 0.02 16.048
3 2 0.05 56.998
3 2 0.1 62.110
3 2 0.2 65.748
3 5 0.02 12.547
3 5 0.05 88.858
3 5 0.1 113.624
3 5 0.2 118.667
3 10 0.02 13.281
3 10 0.05 140.796
3 10 0.1 144.226
3 10 0.2 155.619
Best 3 0.5 0.05 16.905
4 0.05 0.02 14.363
4 0.05 0.05 59.348
4 0.05 0.1 86.805
4 0.05 0.2 105.910
4 0.1 0.02 13.604
4 0.1 0.05 36.083
4 0.1 0.1 45.664
4 0.1 0.2 53.741
4 0.2 0.02 13.800
4 0.2 0.05 21.749
4 0.2 0.1 26.919
4 0.2 0.2 32.217
4 0.25 0.02 13.619
4 0.25 0.05 18.858
4 0.25 0.1 24.051
4 0.25 0.2 28.931
4 0.5 0.02 11.847
4 0.5 0.05 14.105
4 0.5 0.1 19.890
4 0.5 0.2 23.049
4 0.75 0.02 11.037
4 0.75 0.05 14.096
4 0.75 0.1 18.656
4 0.75 0.2 21.623
4 1 0.02 11.071
4 1 0.05 16.042
4 1 0.1 20.183
4 1 0.2 23.295
4 1.25 0.02 11.404
4 1.25 0.05 19.661
4 1.25 0.1 23.362
4 1.25 0.2 26.142
4 1.5 0.02 15.004
4 1.5 0.05 24.211
4 1.5 0.1 27.585
4 1.5 0.2 30.108
4 1.75 0.02 16.179
4 1.75 0.05 29.219
4 1.75 0.1 32.388
4 1.75 0.2 34.689
4 2 0.02 17.819
4 2 0.05 34.463
4 2 0.1 37.459
4 2 0.2 39.561
4 5 0.02 11.883
4 5 0.05 83.986
4 5 0.1 89.541
4 5 0.2 92.271
4 10 0.02 82.954
4 10 0.05 18.034
4 10 0.1 140.178
4 10 0.2 145.005
Best 4 0.75 0.05 14.461
0.02 14.519
2 0.05 0.05 63.792
2 0.05 0.1 91.418
2 0.05 0.2 109.974
2 0.1 0.02 14.082
2 0.1 0.05 39.592
2 0.1 0.1 51.005
2 0.1 0.2 58.453
2 0.2 0.02 13.718
2 0.2 0.05 23.820
2 0.2 0.1 31.456
2 0.2 0.2 35.619
2 0.25 0.02 13.764
2 0.25 0.05 21.128
2 0.25 0.1 28.298
2 0.25 0.2 31.994
2 0.5 0.02 12.509
2 0.5 0.05 16.580
2 0.5 0.1 22.497
2 0.5 0.2 25.576
2 0.75 0.02 11.942
2 0.75 0.05 15.862
2 0.75 0.1 21.373
2 0.75 0.2 24.234
2 1 0.02 12.728
2 1 0.05 17.282
2 1 0.1 22.400
2 1 0.2 26.184
2 1.25 0.02 12.941
2 1.25 0.05 21.206
2 1.25 0.1 25.119
2 1.25 0.2 29.192
2 1.5 0.02 14.684
2 1.5 0.05 25.129
2 1.5 0.1 28.699
2 1.5 0.2 33.022
2 1.75 0.02 16.436
2 1.75 0.05 29.206
2 1.75 0.1 32.563
2 1.75 0.2 37.068
2 2 0.02 16.692
2 2 0.05 33.057
2 2 0.1 36.367
2 2 0.2 40.992
2 5 0.02 32.007
2 5 0.05 57.860
2 5 0.1 67.534
2 5 0.2 73.424
2 10 0.02 44.966
2 10 0.05 79.477
2 10 0.1 101.918
2 10 0.2 107.490
Best 2 0.75 0.05 13.891
3 0.05 0.02 14.269
3 0.05 0.05 36.837
3 0.05 0.1 46.030
3 0.05 0.2 55.521
3 0.1 0.02 13.075
3 0.1 0.05 21.752
3 0.1 0.1 27.472
3 0.1 0.2 33.703
3 0.2 0.02 12.698
3 0.2 0.05 15.963
3 0.2 0.1 21.311
3 0.2 0.2 26.257
3 0.25 0.02 12.992
3 0.25 0.05 15.193
3 0.25 0.1 20.424
3 0.25 0.2 25.151
3 0.5 0.02 9.554
3 0.5 0.05 16.455
3 0.5 0.1 22.115
3 0.5 0.2 25.856
3 0.75 0.02 10.123
3 0.75 0.05 24.821
3 0.75 0.1 28.820
3 0.75 0.2 32.159
3 1 0.02 11.033
3 1 0.05 32.163
3 1 0.1 36.106
3 1 0.2 39.190
3 1.25 0.02 10.965
3 1.25 0.05 39.798
3 1.25 0.1 43.134
3 1.25 0.2 46.389
3 1.5 0.02 15.547
3 1.5 0.05 46.307
3 1.5 0.1 49.754
3 1.5 0.2 53.174
3 1.75 0.02 11.687
3 1.75 0.05 51.832
3 1.75 0.1 56.055
3 1.75 0.2 59.598
3 2 0.02 16.048
3 2 0.05 56.998
3 2 0.1 62.110
3 2 0.2 65.748
3 5 0.02 12.547
3 5 0.05 88.858
3 5 0.1 113.624
3 5 0.2 118.667
3 10 0.02 13.281
3 10 0.05 140.796
3 10 0.1 144.226
3 10 0.2 155.619
Best 3 0.5 0.05 16.905
4 0.05 0.02 14.363
4 0.05 0.05 59.348
4 0.05 0.1 86.805
4 0.05 0.2 105.910
4 0.1 0.02 13.604
4 0.1 0.05 36.083
4 0.1 0.1 45.664
4 0.1 0.2 53.741
4 0.2 0.02 13.800
4 0.2 0.05 21.749
4 0.2 0.1 26.919
4 0.2 0.2 32.217
4 0.25 0.02 13.619
4 0.25 0.05 18.858
4 0.25 0.1 24.051
4 0.25 0.2 28.931
4 0.5 0.02 11.847
4 0.5 0.05 14.105
4 0.5 0.1 19.890
4 0.5 0.2 23.049
4 0.75 0.02 11.037
4 0.75 0.05 14.096
4 0.75 0.1 18.656
4 0.75 0.2 21.623
4 1 0.02 11.071
4 1 0.05 16.042
4 1 0.1 20.183
4 1 0.2 23.295
4 1.25 0.02 11.404
4 1.25 0.05 19.661
4 1.25 0.1 23.362
4 1.25 0.2 26.142
4 1.5 0.02 15.004
4 1.5 0.05 24.211
4 1.5 0.1 27.585
4 1.5 0.2 30.108
4 1.75 0.02 16.179
4 1.75 0.05 29.219
4 1.75 0.1 32.388
4 1.75 0.2 34.689
4 2 0.02 17.819
4 2 0.05 34.463
4 2 0.1 37.459
4 2 0.2 39.561
4 5 0.02 11.883
4 5 0.05 83.986
4 5 0.1 89.541
4 5 0.2 92.271
4 10 0.02 82.954
4 10 0.05 18.034
4 10 0.1 140.178
4 10 0.2 145.005
Best 4 0.75 0.05 14.461
